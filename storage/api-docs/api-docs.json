{
    "openapi": "3.0.0",
    "info": {
        "title": "Guppa Api",
        "contact": {
            "email": "support@guppa.com"
        },
        "version": "1.0.0"
    },
    "paths": {
        "/api/user/user_check_keys": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get user check list for 2Fa, Email Verified and is onboard or verified for client",
                "description": "check list",
                "operationId": "checkListUser",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/user/freelancers": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get list of freelancers",
                "description": "Returns list of freelancers",
                "operationId": "getUsersList",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/user/freelancer/{userId}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get user information",
                "description": "Returns user data",
                "operationId": "getUserById",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "User not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/user/clients": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get list of clients",
                "description": "Returns list of clients",
                "operationId": "getClientsList",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/user/client/{clientId}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get Client information",
                "description": "Returns Client data",
                "operationId": "getClientById",
                "parameters": [
                    {
                        "name": "clientId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Client not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/user/freelancer-profile/{user_id}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "After user is on boarded, get the user profile details",
                "description": "Returns user data",
                "operationId": "getUserProfileById",
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "User not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/user/freelancer-public-profile/{user_id}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get Freelancer public profile",
                "description": "Returns freelancer data",
                "operationId": "getUserPublicProfileById",
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "User not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/user/upload-profile": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "upload profile photo",
                "description": "upload profile photo",
                "operationId": "uploadProfile",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "image_path"
                                ],
                                "properties": {
                                    "image_path": {
                                        "type": "string",
                                        "example": "0000/file.png"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/user/forgot-password": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "password reset link",
                "description": "request for password reset link!",
                "operationId": "forgotPassword",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "email"
                                ],
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "string@example.com"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/api/user/reset-password/{token}": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "reset password",
                "description": "reset password",
                "operationId": "resetPassword",
                "parameters": [
                    {
                        "name": "token",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "password"
                                ],
                                "properties": {
                                    "password": {
                                        "type": "string",
                                        "example": "Str12@#"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/api/user/freelancer_bid": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get freelancer bid",
                "description": "Returns freelancer bid",
                "operationId": "getFreelancerBid",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/user/freelancer_bids": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get all freelancer bids",
                "description": "Returns list freelancer bids",
                "operationId": "getFreelancerBids",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/user/create_update_portfolio": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Create or update portfolio",
                "description": "Create or update portfolio",
                "operationId": "upsertPortfolio",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "file_path",
                                    "description",
                                    "portfolio_id"
                                ],
                                "properties": {
                                    "file_path": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "description"
                                    },
                                    "portfolio_id": {
                                        "type": "integer",
                                        "example": "0"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/user/generate_chatId": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Generate chat Id for messaging",
                "description": "Generate chat Id for messaging",
                "operationId": "generateChatId",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/user/portfolio/delete/{id}": {
            "delete": {
                "tags": [
                    "Users"
                ],
                "summary": "Delete portfolio",
                "description": "delete portfolio",
                "operationId": "deletePortfolio",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/user/update-skills": {
            "put": {
                "tags": [
                    "Users"
                ],
                "summary": "update skills",
                "description": "update skills",
                "operationId": "updateSkills",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "skills"
                                ],
                                "properties": {
                                    "skills": {
                                        "type": "string",
                                        "example": "string,string,string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/user/update-hourly-rate": {
            "put": {
                "tags": [
                    "Users"
                ],
                "summary": "update hourly rate",
                "description": "update hourly rate",
                "operationId": "updateHourlyRate",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "hourly_rate"
                                ],
                                "properties": {
                                    "hourly_rate": {
                                        "type": "number",
                                        "example": 0
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/user/update-short-bio": {
            "put": {
                "tags": [
                    "Users"
                ],
                "summary": "update short bio",
                "description": "update short bio",
                "operationId": "updateShortBio",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "short_bio"
                                ],
                                "properties": {
                                    "short_bio": {
                                        "type": "string",
                                        "example": "I am..."
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/user/update-language": {
            "put": {
                "tags": [
                    "Users"
                ],
                "summary": "update language",
                "description": "update language",
                "operationId": "updateLanguage",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "language"
                                ],
                                "properties": {
                                    "language": {
                                        "type": "string",
                                        "example": "english"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/user/update-looking-for": {
            "put": {
                "tags": [
                    "Users"
                ],
                "summary": "update looking for",
                "description": "update looking for",
                "operationId": "updateLookingFor",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "looking_for"
                                ],
                                "properties": {
                                    "looking_for": {
                                        "type": "string",
                                        "example": "contract"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/user/activate/{userId}": {
            "put": {
                "tags": [
                    "Users"
                ],
                "summary": "Activate User",
                "description": "Activate user",
                "operationId": "5b189af214a3f033157b3cc07fcb1b63",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "ID of the user",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User activated"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/user/deactivate/{userId}": {
            "put": {
                "tags": [
                    "Users"
                ],
                "summary": "Deactivate User",
                "description": "Deactivate user",
                "operationId": "bf97af216ef2b3afa2f972930a82e7c9",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "ID of the user",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User activated"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/user/track-profile": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Track profile completion",
                "description": "Track Freelancer profile completion",
                "operationId": "trackProfileCompletion",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/user/current_user": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get Current Logged in user details",
                "description": "Get Current Logged in user details",
                "operationId": "currentLoggedInUser",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/user/delete_user/{userId}": {
            "delete": {
                "tags": [
                    "Users"
                ],
                "summary": "delete User",
                "description": "delete user",
                "operationId": "a49736db36c78af6c61879bca0ff08a5",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "ID of the user",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User deleted"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/user/update-details": {
            "put": {
                "tags": [
                    "Users"
                ],
                "summary": "Update user details",
                "description": "Update the authenticated user's details.",
                "operationId": "15ecd876a22e41509432c79b3cc1c313",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "first_name",
                                    "last_name",
                                    "phone_no",
                                    "country"
                                ],
                                "properties": {
                                    "first_name": {
                                        "type": "string",
                                        "maxLength": 255,
                                        "example": "John"
                                    },
                                    "last_name": {
                                        "type": "string",
                                        "maxLength": 255,
                                        "example": "Doe"
                                    },
                                    "phone_no": {
                                        "type": "string",
                                        "maxLength": 15,
                                        "example": "+1234567890"
                                    },
                                    "country": {
                                        "type": "string",
                                        "maxLength": 255,
                                        "example": "USA"
                                    },
                                    "gender": {
                                        "type": "string",
                                        "enum": [
                                            "male",
                                            "female"
                                        ],
                                        "example": "male",
                                        "nullable": true
                                    },
                                    "age_group": {
                                        "type": "string",
                                        "enum": [
                                            "18_25",
                                            "25_29",
                                            "30_45",
                                            "46_50",
                                            "50above"
                                        ],
                                        "example": "25_29",
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User details updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "User details updated successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "errors": {
                                            "properties": {
                                                "first_name": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "First name is required"
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "An error occurred while updating user details"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/user/change_password": {
            "put": {
                "tags": [
                    "Users"
                ],
                "summary": "Change user password",
                "description": "Endpoint to change the authenticated user's password. The user must provide their old password, a new password, and a confirmation for the new password.",
                "operationId": "changePassword",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "old_password",
                                    "password",
                                    "password_confirmation"
                                ],
                                "properties": {
                                    "old_password": {
                                        "description": "The current password of the user",
                                        "type": "string",
                                        "example": "current_password123"
                                    },
                                    "password": {
                                        "description": "The new password for the user (Minimum 10 characters, must contain letters, mixed case, numbers, symbols)",
                                        "type": "string",
                                        "example": "NewPassw0rd!"
                                    },
                                    "password_confirmation": {
                                        "description": "Must match the new password",
                                        "type": "string",
                                        "example": "NewPassw0rd!"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Password updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Password updated successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "old_password": [
                                                    "The old password is incorrect."
                                                ],
                                                "password": [
                                                    "The new password must be at least 10 characters."
                                                ]
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/analytics/user-growth": {
            "get": {
                "tags": [
                    "Analytics"
                ],
                "summary": "Get user growth",
                "description": "Retrieves user growth data over time.",
                "operationId": "getUserGrowth",
                "responses": {
                    "200": {
                        "description": "User growth data retrieved"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/analytics/user-demographics": {
            "get": {
                "tags": [
                    "Analytics"
                ],
                "summary": "Get user demographics",
                "description": "Retrieves user demographics data by age group.",
                "operationId": "getUserDemographics",
                "responses": {
                    "200": {
                        "description": "User demographics data retrieved"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/analytics/behavior-metrics": {
            "get": {
                "tags": [
                    "Analytics"
                ],
                "summary": "Get behavior metrics",
                "description": "Retrieves user behavior metrics including average time spent per activity.",
                "operationId": "getBehaviorMetrics",
                "responses": {
                    "200": {
                        "description": "Behavior metrics data retrieved"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/analytics/time-spent": {
            "post": {
                "tags": [
                    "Analytics"
                ],
                "summary": "Update time spent on activity",
                "description": "Updates the time spent by the user on a specific activity.",
                "operationId": "updateTimeSpent",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "time_spent",
                                    "activity"
                                ],
                                "properties": {
                                    "time_spent": {
                                        "description": "Time spent on activity",
                                        "type": "number",
                                        "format": "float"
                                    },
                                    "activity": {
                                        "description": "Activity name",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Time spent updated"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/analytics/project-status": {
            "get": {
                "tags": [
                    "Project Analytics"
                ],
                "summary": "Get project status summary",
                "description": "Retrieves the total number of contracts and the number of contracts per status.",
                "operationId": "getProjectStatus",
                "responses": {
                    "200": {
                        "description": "Project status summary retrieved",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "total_projects": {
                                            "description": "Total number of projects",
                                            "type": "integer"
                                        },
                                        "done_projects": {
                                            "description": "Number of projects with status 'Done'",
                                            "type": "integer"
                                        },
                                        "in_review_projects": {
                                            "description": "Number of projects with status 'In Review'",
                                            "type": "integer"
                                        },
                                        "in_progress_projects": {
                                            "description": "Number of projects with status 'In Progress'",
                                            "type": "integer"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/analytics/project-types": {
            "get": {
                "tags": [
                    "Project Analytics"
                ],
                "summary": "Get project types summary",
                "description": "Retrieves the total number of job types.",
                "operationId": "getProjectTypes",
                "responses": {
                    "200": {
                        "description": "Job types summary retrieved",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "total_projects": {
                                            "description": "Total number of projects",
                                            "type": "integer"
                                        },
                                        "contracts": {
                                            "description": "Number of contract jobs ",
                                            "type": "integer"
                                        },
                                        "hourly": {
                                            "description": "Number of hourly jobs",
                                            "type": "integer"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/user/create-user": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Create a new user",
                "description": "create a new user (admin or support)",
                "operationId": "createNewUser",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "first_name",
                                    "last_name",
                                    "email",
                                    "phone_no",
                                    "country",
                                    "role"
                                ],
                                "properties": {
                                    "first_name": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "last_name": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "string@example.com"
                                    },
                                    "phone_no": {
                                        "type": "string",
                                        "format": "tel",
                                        "example": "tel"
                                    },
                                    "country": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "role": {
                                        "type": "string",
                                        "example": "admin"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/api/user/admin-onboard": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Onboard an administrator by setting a password and activating their account",
                "operationId": "ec95ba03b7f2c30195215b9e31eef5f1",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "email",
                                    "password",
                                    "password_confirmation"
                                ],
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "example": "encrypted-email-string"
                                    },
                                    "password": {
                                        "type": "string",
                                        "example": "StrongPassword123!"
                                    },
                                    "password_confirmation": {
                                        "type": "string",
                                        "example": "StrongPassword123!"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Activation completed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Activation completed"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Not Found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "validation error"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Server error occurred."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/user/register": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Register new user",
                "description": "create a new user in the system",
                "operationId": "registerNewUser",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "first_name",
                                    "last_name",
                                    "email",
                                    "phone_no",
                                    "country",
                                    "password",
                                    "password_confirmation",
                                    "account_type",
                                    "agreement_policy"
                                ],
                                "properties": {
                                    "first_name": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "last_name": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "string@example.com"
                                    },
                                    "phone_no": {
                                        "type": "string",
                                        "format": "tel",
                                        "example": "tel"
                                    },
                                    "country": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "string"
                                    },
                                    "password_confirmation": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "string"
                                    },
                                    "account_type": {
                                        "type": "string",
                                        "example": "F"
                                    },
                                    "agreement_policy": {
                                        "type": "boolean",
                                        "example": "true"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/api/user/login": {
            "get": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Login Redirect",
                "description": "redirect login",
                "operationId": "loginRedirect",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            },
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Login user",
                "description": "login",
                "operationId": "loginNewUser",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "email",
                                    "password"
                                ],
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "string@example.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/api/user/2fa/enable2fa": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Enable Two auth",
                "description": "enable2fa",
                "operationId": "enable2FA",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/api/user/2fa/disable2fa": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Disable Two auth",
                "description": "disable2fa",
                "operationId": "disable2fa",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/api/user/2fa/resend-code": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "resend Code",
                "description": "resend 2fa code",
                "operationId": "resendCode",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/api/user/2fa/verify2fa": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Verify  Two factor auth",
                "description": "verify",
                "operationId": "verify2fa",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "code"
                                ],
                                "properties": {
                                    "code": {
                                        "type": "integer",
                                        "format": "number",
                                        "example": "000000"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/api/user/2fa/prompt": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Prompt for 2fa verification",
                "description": "prompt",
                "operationId": "prompt",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/api/user/2fa/verify": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Verify  Two factor auth",
                "description": "verify",
                "operationId": "verify",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "code"
                                ],
                                "properties": {
                                    "code": {
                                        "type": "integer",
                                        "format": "number",
                                        "example": "000000"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/api/user/facebook_login": {
            "get": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Login With Facebook",
                "description": "facebook_login",
                "operationId": "facebookLogin",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/api/user/facebook_callback": {
            "get": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Login With Facebook",
                "description": "facebook_login",
                "operationId": "facebookCallback",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/api/user/google_login": {
            "get": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Login With google",
                "description": "google_login",
                "operationId": "googleLogin",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/api/user/google_callback": {
            "get": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Login With google",
                "description": "google_login",
                "operationId": "googleCallback",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/api/user/email/resend-code": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "resend email Code",
                "description": "resend email code",
                "operationId": "resendEmailCode",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/api/user/email/prompt": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Prompt for email verification",
                "description": "prompt",
                "operationId": "promptEmail",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/api/user/email/verify": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Verify  email ",
                "description": "verify email",
                "operationId": "verifyEmail",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "code"
                                ],
                                "properties": {
                                    "code": {
                                        "type": "integer",
                                        "format": "number",
                                        "example": "000000"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/api/user/logout": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Logout User",
                "description": "verify",
                "operationId": "logout",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/api/bidpaymentconfig/create": {
            "post": {
                "tags": [
                    "BidPaymentConfig"
                ],
                "summary": "Create new Bid Payment Config",
                "description": "Create a new Bid Payment Config",
                "operationId": "createBidPaymentConfig",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "amount"
                                ],
                                "properties": {
                                    "amount": {
                                        "type": "integer",
                                        "example": "2000"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Validation error"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/bidpaymentconfig/getBidConfig": {
            "get": {
                "tags": [
                    "BidPaymentConfig"
                ],
                "summary": "Get  Bid Payment Config",
                "description": "Returns  Bid Payment Config",
                "operationId": "getAllBidPaymentConfig",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "404": {
                        "description": "No Bid Payment Config found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/category/upsert-category": {
            "post": {
                "tags": [
                    "Category"
                ],
                "summary": "Create or update a category",
                "description": "Creates a new category or updates an existing one based on the provided data.",
                "operationId": "upsertCategory",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "category_id",
                                    "category"
                                ],
                                "properties": {
                                    "category_id": {
                                        "type": "integer",
                                        "example": 0
                                    },
                                    "category": {
                                        "type": "string",
                                        "example": "Electronics"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/category/delete/{id}": {
            "delete": {
                "tags": [
                    "Category"
                ],
                "summary": "Delete a category",
                "description": "Deletes a category by ID.",
                "operationId": "deleteCategory",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the category to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Category deleted"
                    },
                    "404": {
                        "description": "Category not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/category/activate/{id}": {
            "put": {
                "tags": [
                    "Category"
                ],
                "summary": "Activate a category",
                "description": "Activates a category by ID.",
                "operationId": "activateCategory",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the category to activate",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Category activated"
                    },
                    "404": {
                        "description": "Category not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/category/deactivate/{id}": {
            "put": {
                "tags": [
                    "Category"
                ],
                "summary": "Deactivate a category",
                "description": "Deactivates a category by ID.",
                "operationId": "deactivateCategory",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the category to deactivate",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Category deactivated"
                    },
                    "404": {
                        "description": "Category not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/category/get_category/{id}": {
            "get": {
                "tags": [
                    "Category"
                ],
                "summary": "Get a category by ID",
                "description": "Fetches a category by its ID.",
                "operationId": "getCategoryById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the category to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Category retrieved"
                    },
                    "404": {
                        "description": "Category not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/category/categories": {
            "get": {
                "tags": [
                    "Category"
                ],
                "summary": "Get all categories",
                "description": "Fetches all categories.",
                "operationId": "getAllCategories",
                "responses": {
                    "200": {
                        "description": "Categories retrieved"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/category/get_categories_admin": {
            "get": {
                "tags": [
                    "Category"
                ],
                "summary": "Get all categories for admin",
                "description": "Fetches all categories admin.",
                "operationId": "getAllCategoriesForAdmin",
                "responses": {
                    "200": {
                        "description": "Categories retrieved"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/chat/initiate-chat": {
            "post": {
                "tags": [
                    "Chat"
                ],
                "summary": "Start chatting with a freelancer or client",
                "description": "Start chatting with a freelancer or client",
                "operationId": "initiateChat",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "sender_chat_id",
                                    "receiver_chat_id"
                                ],
                                "properties": {
                                    "sender_chat_id": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "receiver_chat_id": {
                                        "type": "string",
                                        "example": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/chat/send-message": {
            "post": {
                "tags": [
                    "Chat"
                ],
                "summary": "Send a message",
                "description": "send message",
                "operationId": "sendMessage",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "sender_chat_id",
                                    "receiver_chat_id",
                                    "chat_id",
                                    "message",
                                    "message_id"
                                ],
                                "properties": {
                                    "sender_chat_id": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "receiver_chat_id": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "chat_id": {
                                        "type": "integer",
                                        "example": 0
                                    },
                                    "message": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "message_id": {
                                        "type": "integer",
                                        "example": 0
                                    },
                                    "IsFile": {
                                        "type": "boolean",
                                        "example": false
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/chat/messages/{chat_id}": {
            "get": {
                "tags": [
                    "Chat"
                ],
                "summary": "Get list of messages for a specific chat",
                "description": "Returns list of messages for a chat",
                "operationId": "getMessages",
                "parameters": [
                    {
                        "name": "chat_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/chat/latest_chat": {
            "get": {
                "tags": [
                    "Chat"
                ],
                "summary": "Get list of messages for a latest chat",
                "description": "Returns list of messages for latest chat",
                "operationId": "getLatestChat",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/chat/my-chats": {
            "get": {
                "tags": [
                    "Chat"
                ],
                "summary": "Get list of my chats",
                "description": "Returns list of my chats",
                "operationId": "getMyChats",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/chat/send-attachment": {
            "post": {
                "tags": [
                    "Chat"
                ],
                "summary": "Send attachment",
                "description": "Send attachment",
                "operationId": "sendAttachment",
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "attachment",
                                    "chat_id",
                                    "sender_chat_id",
                                    "receiver_chat_id"
                                ],
                                "properties": {
                                    "attachment": {
                                        "description": "The file to upload",
                                        "type": "string",
                                        "format": "binary",
                                        "example": "file"
                                    },
                                    "chat_id": {
                                        "type": "integer",
                                        "example": 0
                                    },
                                    "sender_chat_id": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "receiver_chat_id": {
                                        "type": "string",
                                        "example": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/chat/delete/{message_id}": {
            "delete": {
                "tags": [
                    "Chat"
                ],
                "summary": "Delete message",
                "description": "delete message",
                "operationId": "deleteMessage",
                "parameters": [
                    {
                        "name": "message_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/chat/delete_chat/{chat_id}": {
            "delete": {
                "tags": [
                    "Chat"
                ],
                "summary": "Delete chat",
                "description": "delete chat",
                "operationId": "deleteChat",
                "parameters": [
                    {
                        "name": "chat_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/configuration/create-role": {
            "post": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Create new role",
                "description": "create a new role",
                "operationId": "createRole",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "role"
                                ],
                                "properties": {
                                    "role": {
                                        "type": "string",
                                        "example": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/configuration/roles": {
            "get": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Get list of roles",
                "description": "Returns list of roles",
                "operationId": "getRolesList",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/configuration/role/{id}": {
            "get": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Get role information",
                "description": "Returns role data",
                "operationId": "getRoleById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Role not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/configuration/role/update": {
            "put": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Update new role",
                "description": "update a new role",
                "operationId": "updateRole",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "role",
                                    "role_id"
                                ],
                                "properties": {
                                    "role": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "role_id": {
                                        "type": "integer",
                                        "example": "0"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/configuration/role/delete/{id}": {
            "delete": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Delete role",
                "description": "delete role",
                "operationId": "deleteRole",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/configuration/create-ability": {
            "post": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Create new ability",
                "description": "create a new ability",
                "operationId": "createAbility",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "ability",
                                    "role_id"
                                ],
                                "properties": {
                                    "ability": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "role_id": {
                                        "type": "integer",
                                        "example": "0"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/configuration/abilities": {
            "get": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Get list of abilities",
                "description": "Returns list of abilities",
                "operationId": "getAbilityList",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/configuration/ability/{id}": {
            "get": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Get ability information",
                "description": "Returns ability data",
                "operationId": "getAbilityById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Ability not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/configuration/ability/update": {
            "put": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Update new ability",
                "description": "update a new ability",
                "operationId": "updateAbility",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "ability",
                                    "role_id",
                                    "ability_id"
                                ],
                                "properties": {
                                    "ability": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "role_id": {
                                        "type": "integer",
                                        "example": "0"
                                    },
                                    "ability_id": {
                                        "type": "integer",
                                        "example": "0"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/configuration/ability/delete/{id}": {
            "delete": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Delete ability",
                "description": "delete ability",
                "operationId": "deleteAbility",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/configuration/create-prefix": {
            "post": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Create new prefix",
                "description": "create a new prefix",
                "operationId": "createPrefix",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "prefix"
                                ],
                                "properties": {
                                    "prefix": {
                                        "type": "string",
                                        "example": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/configuration/prefixes": {
            "get": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Get list of prefixes",
                "description": "Returns list of prefixes",
                "operationId": "getPrefixList",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/configuration/prefix/{id}": {
            "get": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Get prefix information",
                "description": "Returns prefix data",
                "operationId": "getPrefixById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Prefix not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/configuration/prefix/update": {
            "put": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Update new prefix",
                "description": "update a new prefix",
                "operationId": "updatePrefix",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "prefix",
                                    "prefix_id"
                                ],
                                "properties": {
                                    "prefix": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "prefix_id": {
                                        "type": "integer",
                                        "example": "0"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/configuration/prefix/delete/{id}": {
            "delete": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Delete prefix",
                "description": "delete prefix",
                "operationId": "deletePrefix",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/configuration/create-middleware": {
            "post": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Create new middleware",
                "description": "create a new middleware",
                "operationId": "createMiddleware",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "key",
                                    "value",
                                    "prefix_id"
                                ],
                                "properties": {
                                    "key": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "value": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "prefix_id": {
                                        "type": "integer",
                                        "example": "0"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/configuration/middlewares": {
            "get": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Get list of middlewares",
                "description": "Returns list of middlewares",
                "operationId": "getMiddlewareList",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/configuration/middleware/{id}": {
            "get": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Get middleware information",
                "description": "Returns middleware data",
                "operationId": "getMiddlewareById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Middleware not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/configuration/middleware/update": {
            "put": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Update new middleware",
                "description": "update a new middleware",
                "operationId": "updateMiddleware",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "key",
                                    "value",
                                    "prefix_id",
                                    "middleware_id"
                                ],
                                "properties": {
                                    "key": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "value": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "prefix_id": {
                                        "type": "integer",
                                        "example": "0"
                                    },
                                    "middleware_id": {
                                        "type": "integer",
                                        "example": "0"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/configuration/middleware/delete/{id}": {
            "delete": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Delete middleware",
                "description": "delete middleware",
                "operationId": "deleteMiddleware",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/configuration/create-controller": {
            "post": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Create new controller",
                "description": "create a new controller",
                "operationId": "createController",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "prefix_id",
                                    "middleware_id",
                                    "controller"
                                ],
                                "properties": {
                                    "prefix_id": {
                                        "type": "integer",
                                        "example": "0"
                                    },
                                    "middleware_id": {
                                        "type": "integer",
                                        "example": "0"
                                    },
                                    "controller": {
                                        "type": "string",
                                        "example": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/configuration/controllers": {
            "get": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Get list of controllers",
                "description": "Returns list of controllers",
                "operationId": "getControllerList",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/configuration/controller/{id}": {
            "get": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Get controller information",
                "description": "Returns controller data",
                "operationId": "getControllerById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Controller not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/configuration/controller/update": {
            "put": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Update new controller",
                "description": "update a new controller",
                "operationId": "updateController",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "prefix_id",
                                    "middleware_id",
                                    "controller",
                                    "controller_id"
                                ],
                                "properties": {
                                    "prefix_id": {
                                        "type": "integer",
                                        "example": "0"
                                    },
                                    "middleware_id": {
                                        "type": "integer",
                                        "example": "0"
                                    },
                                    "controller": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "controller_id": {
                                        "type": "integer",
                                        "example": "0"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/configuration/controller/delete/{id}": {
            "delete": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Delete controller",
                "description": "delete controller",
                "operationId": "deleteController",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/configuration/create-route": {
            "post": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Create new route",
                "description": "create a new route",
                "operationId": "createRoute",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "controller_id",
                                    "method",
                                    "action",
                                    "url",
                                    "name"
                                ],
                                "properties": {
                                    "controller_id": {
                                        "type": "integer",
                                        "example": "0"
                                    },
                                    "method": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "action": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "url": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "name": {
                                        "type": "string",
                                        "example": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/configuration/routes": {
            "get": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Get list of routes",
                "description": "Returns list of routes",
                "operationId": "getRoutesList",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/configuration/route/{id}": {
            "get": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Get route information",
                "description": "Returns route data",
                "operationId": "getRouteById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "route not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/configuration/route/update": {
            "put": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Update new route",
                "description": "update a new route",
                "operationId": "updateRoute",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "controller_id",
                                    "method",
                                    "action",
                                    "url",
                                    "name",
                                    "route_id"
                                ],
                                "properties": {
                                    "controller_id": {
                                        "type": "integer",
                                        "example": "0"
                                    },
                                    "method": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "action": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "url": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "name": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "route_id": {
                                        "type": "integer",
                                        "example": "0"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/configuration/route/delete/{id}": {
            "delete": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Delete route",
                "description": "delete route",
                "operationId": "deleteRoute",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/configuration/create-submiddleware": {
            "post": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Create new sub middleware",
                "description": "create a new sub middleware",
                "operationId": "createSubMiddleware",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "value"
                                ],
                                "properties": {
                                    "value": {
                                        "type": "string",
                                        "example": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/configuration/sub-middlewares": {
            "get": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Get list of sub middlewares",
                "description": "Returns list of sub middlewares",
                "operationId": "getSubMiddlewareList",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/configuration/sub-middleware/{id}": {
            "get": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Get sub_middleware information",
                "description": "Returns sub_middleware data",
                "operationId": "getSubMiddlewareById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "sub_middleware not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/configuration/sub-middleware/update": {
            "put": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Update new sub_middleware",
                "description": "update a new sub_middleware",
                "operationId": "updateSubMiddleware",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "value",
                                    "middleware_id"
                                ],
                                "properties": {
                                    "value": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "middleware_id": {
                                        "type": "integer",
                                        "example": "0"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/configuration/sub-middleware/delete/{id}": {
            "delete": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Delete sub_middleware",
                "description": "delete sub_middleware",
                "operationId": "deleteSubMiddleware",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/configuration/create-country": {
            "post": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Create new country",
                "description": "create a new country",
                "operationId": "createCountry",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "country",
                                    "short_code"
                                ],
                                "properties": {
                                    "country": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "short_code": {
                                        "type": "string",
                                        "example": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/configuration/countries": {
            "get": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Get list of countries",
                "description": "Returns list of countries",
                "operationId": "getCountryList",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/configuration/country/{id}": {
            "get": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Get country information",
                "description": "Returns country data",
                "operationId": "getCountryById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Country not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/configuration/country/update": {
            "put": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Update new country",
                "description": "update a new country",
                "operationId": "updateCountry",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "country",
                                    "short_code",
                                    "country_id"
                                ],
                                "properties": {
                                    "country": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "short_code": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "country_id": {
                                        "type": "integer",
                                        "example": "0"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/configuration/country/delete/{id}": {
            "delete": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Delete country",
                "description": "delete country",
                "operationId": "deleteCountry",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/configuration/tokens": {
            "get": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Get list of Tokens",
                "description": "Returns list of Tokens",
                "operationId": "getTokensList",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/configuration/token/delete/{id}": {
            "delete": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Delete  Token",
                "description": "delete Token",
                "operationId": "deleteToken",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/configuration/set-timezone": {
            "post": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Set Time Zone",
                "description": "set Time zone",
                "operationId": "setTimeZone",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "latitude",
                                    "longitude"
                                ],
                                "properties": {
                                    "latitude": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "longitude": {
                                        "type": "string",
                                        "example": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/configuration/create-documentType": {
            "post": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Create new document type",
                "description": "create a new document type",
                "operationId": "createDocType",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Drivers licence"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "drivers licence"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/configuration/doctypes": {
            "get": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Get list of document types",
                "description": "Returns list of document types",
                "operationId": "getAllDocTypes",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/configuration/docType/delete/{id}": {
            "delete": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Delete document type",
                "description": "delete document type",
                "operationId": "deleteDocType",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/footer/getFooters": {
            "get": {
                "tags": [
                    "Footer"
                ],
                "summary": "Get all Footer Social Media",
                "operationId": "fb160dbb446b2115ae08b1ddf74dd58e",
                "responses": {
                    "200": {
                        "description": "Successful"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/footer/getFooter/{id}": {
            "get": {
                "tags": [
                    "Footer"
                ],
                "summary": "Get Footer Social Media by ID",
                "operationId": "144a55f9a9e411393e3014758c908e28",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/footer/createFooter": {
            "post": {
                "tags": [
                    "Footer"
                ],
                "summary": "Create Footer Social Media",
                "operationId": "1b42a0d7a9b15102c5b18c353961b9bc",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "icon",
                                    "url",
                                    "footer_id"
                                ],
                                "properties": {
                                    "icon": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "url": {
                                        "type": "string",
                                        "example": "url"
                                    },
                                    "footer_id": {
                                        "type": "integer",
                                        "example": 0
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Socials added successfully"
                    },
                    "400": {
                        "description": "Error creating Socials"
                    },
                    "422": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/footer/updateFooter/{id}": {
            "put": {
                "tags": [
                    "Footer"
                ],
                "summary": "Update Footer Social Media",
                "operationId": "36a799aa22ec1638e3b48657ed778103",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "icon",
                                    "url"
                                ],
                                "properties": {
                                    "icon": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "url": {
                                        "type": "string",
                                        "example": "url"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Social Media updated successfully"
                    },
                    "404": {
                        "description": "Social media does not exist"
                    },
                    "422": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/footer/deleteFooter/{id}": {
            "delete": {
                "tags": [
                    "Footer"
                ],
                "summary": "Delete Footer Social Media",
                "operationId": "405582a4e2e4cb0d5cb7e83192b190f3",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Social Media deleted successfully"
                    },
                    "404": {
                        "description": "Social media not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/footer/getAllFooterSocialMedia": {
            "get": {
                "tags": [
                    "Footer"
                ],
                "summary": "Get all Footer Social Media",
                "operationId": "e7438d1e9f72485b05c05aa0ee4c426a",
                "responses": {
                    "200": {
                        "description": "Successful"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/footer/getFooterSocialMedia/{id}": {
            "get": {
                "tags": [
                    "Footer"
                ],
                "summary": "Get Footer Social Media by ID",
                "operationId": "c278bd337b6441a1414c9eff0c04f9e1",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/footer/footer-with-socials": {
            "get": {
                "tags": [
                    "Footer"
                ],
                "summary": "Get Footer Social Media for FE",
                "operationId": "8e3cefbf96cec5d4cfee2d9faf07e480",
                "responses": {
                    "200": {
                        "description": "Successful"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/footer/createFooterSocialMedia": {
            "post": {
                "tags": [
                    "Footer"
                ],
                "summary": "Create Footer Social Media",
                "operationId": "1ce2a09e4b6f853eefc3efe4a3c92588",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "icon",
                                    "url",
                                    "footer_id"
                                ],
                                "properties": {
                                    "icon": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "url": {
                                        "type": "string",
                                        "example": "url"
                                    },
                                    "footer_id": {
                                        "type": "integer",
                                        "example": 0
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Socials added successfully"
                    },
                    "400": {
                        "description": "Error creating Socials"
                    },
                    "422": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/footer/updateFooterSocialMedia/{id}": {
            "put": {
                "tags": [
                    "Footer"
                ],
                "summary": "Update Footer Social Media",
                "operationId": "14b1623943b254f6242221e3f8047077",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "icon",
                                    "url"
                                ],
                                "properties": {
                                    "icon": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "url": {
                                        "type": "string",
                                        "example": "url"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Social Media updated successfully"
                    },
                    "404": {
                        "description": "Social media does not exist"
                    },
                    "422": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/footer/deleteFooterSocialMedia/{id}": {
            "delete": {
                "tags": [
                    "Footer"
                ],
                "summary": "Delete Footer Social Media",
                "operationId": "6baccc898b647e4074ea14f67cefd14c",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Social Media deleted successfully"
                    },
                    "404": {
                        "description": "Social media not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/footer/activateFooterSocialMedia/{id}": {
            "put": {
                "tags": [
                    "Footer"
                ],
                "summary": "Activate Footer Social Media",
                "operationId": "6e6858c8b72c2b7ec30c2bd3a143e1fe",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Social Media activate successfully"
                    },
                    "404": {
                        "description": "Social media not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/footer/deactivateFooterSocialMedia/{id}": {
            "put": {
                "tags": [
                    "Footer"
                ],
                "summary": "Deactivate Footer Social Media",
                "operationId": "28609dad07118d63af04dc38400a515c",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Social Media deactivate successfully"
                    },
                    "404": {
                        "description": "Social media not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/footer/getAllFooterCopyrights": {
            "get": {
                "tags": [
                    "Footer"
                ],
                "summary": "Get all Footer Copyrights",
                "operationId": "1f97441a67d7590b95a5b66fab9fc8a9",
                "responses": {
                    "200": {
                        "description": "Successful"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/footer/getFooterCopyright/{id}": {
            "get": {
                "tags": [
                    "Footer"
                ],
                "summary": "Get Footer Copyright by ID",
                "operationId": "e3491b816aef5be4187febffc4dc6a4c",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/footer/createFooterCopyright": {
            "post": {
                "tags": [
                    "Footer"
                ],
                "summary": "Create Footer Copyright",
                "operationId": "1e1bb4ed4b89da917ab290c12a7310bb",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "text",
                                    "footer_id"
                                ],
                                "properties": {
                                    "text": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "footer_id": {
                                        "type": "integer",
                                        "example": 0
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Footer Copyright added successfully"
                    },
                    "400": {
                        "description": "Error creating Footer Copyright"
                    },
                    "422": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/footer/updateFooterCopyright/{id}": {
            "put": {
                "tags": [
                    "Footer"
                ],
                "summary": "Update Footer Copyright",
                "operationId": "5b4dd58590a7784312a75161df5f3704",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "text"
                                ],
                                "properties": {
                                    "text": {
                                        "type": "string",
                                        "example": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Footer Copyright updated successfully"
                    },
                    "404": {
                        "description": "Footer Copyright does not exist"
                    },
                    "422": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/footer/deleteFooterCopyright/{id}": {
            "delete": {
                "tags": [
                    "Footer"
                ],
                "summary": "Delete Footer Copyright",
                "operationId": "cc77888cc1bec6a38aa97e19efdab060",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Footer Copyright deleted successfully"
                    },
                    "404": {
                        "description": "Footer Copyright not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/dashboard/client-tables": {
            "get": {
                "tags": [
                    "Dashboard"
                ],
                "summary": "Get client tables",
                "operationId": "d1be28adcda4d116d1162f22d071ad84",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "object"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Client tables fetched successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "data": {
                                            "type": "null"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Bad request"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/dashboard/client-statistics": {
            "get": {
                "tags": [
                    "Dashboard"
                ],
                "summary": "Get client statistics",
                "operationId": "9dc776ef2cff758f64b9b70adf91b74c",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "object"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Client statistics fetched successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "data": {
                                            "type": "null"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Bad request"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/dashboard/admin-tables": {
            "get": {
                "tags": [
                    "Dashboard"
                ],
                "summary": "Get admin tables",
                "operationId": "0f1cac9223e1aeb029d54328decd04fe",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "object"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Client tables fetched successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "data": {
                                            "type": "null"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Bad request"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/dashboard/admin-statistics": {
            "get": {
                "tags": [
                    "Dashboard"
                ],
                "summary": "Get admin statistics",
                "operationId": "07f0add861ed068f24a9aad5584e60c8",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "object"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "admin statistics fetched successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "data": {
                                            "type": "null"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Bad request"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/dashboard/dashboard-counters": {
            "get": {
                "tags": [
                    "Dashboard"
                ],
                "summary": "Get dashboard counters",
                "operationId": "8ca10020a17cb7acb09164735725503d",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "object"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "admin statistics fetched successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "data": {
                                            "type": "null"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Bad request"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/dashboard/latest-tickets": {
            "get": {
                "tags": [
                    "Dashboard"
                ],
                "summary": "Get latest tickets from support",
                "operationId": "7722481ab3d1f16d649eb20f6bdc71e2",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "object"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "admin statistics fetched successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "data": {
                                            "type": "null"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Bad request"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/dashboard/latest-users": {
            "get": {
                "tags": [
                    "Dashboard"
                ],
                "summary": "Get latest users",
                "operationId": "7c0abd33702dc1f63e6d42499b398758",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "object"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "admin statistics fetched successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "data": {
                                            "type": "null"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Bad request"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/discoverTalent/create-talent": {
            "post": {
                "tags": [
                    "DiscoverTalent"
                ],
                "summary": "Create Discover Talent",
                "description": "Create a new Discover Talent",
                "operationId": "createDiscoverTalent",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "title",
                                    "description",
                                    "button_text"
                                ],
                                "properties": {
                                    "title": {
                                        "type": "string",
                                        "example": "Discover Title"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "This is a description"
                                    },
                                    "button_text": {
                                        "type": "string",
                                        "example": "Click Here"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Discover Talent created successfully"
                    },
                    "400": {
                        "description": "Error creating Discover Talent"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/discoverTalent/discover-talents": {
            "get": {
                "tags": [
                    "DiscoverTalent"
                ],
                "summary": "Get All Discover Talents",
                "description": "Get all Discover Talents",
                "operationId": "getAllDiscoverTalent",
                "responses": {
                    "200": {
                        "description": "Successful"
                    },
                    "404": {
                        "description": "No Discover Talents found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/discoverTalent/discover-talent-with-bg": {
            "get": {
                "tags": [
                    "DiscoverTalent"
                ],
                "summary": "Get  Discover Talent with bg",
                "description": "Get  Discover Talents",
                "operationId": "getAllDiscoverTalentWithBg",
                "responses": {
                    "200": {
                        "description": "Successful"
                    },
                    "404": {
                        "description": "No Discover Talents found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/discoverTalent/discover-talent/{id}": {
            "get": {
                "tags": [
                    "DiscoverTalent"
                ],
                "summary": "Get Discover Talent by ID",
                "description": "Get a Discover Talent by its ID",
                "operationId": "getDiscoverTalentById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful"
                    },
                    "404": {
                        "description": "Discover Talent not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/discoverTalent/discover-talent/update": {
            "put": {
                "tags": [
                    "DiscoverTalent"
                ],
                "summary": "Update Discover Talent",
                "description": "Update an existing Discover Talent",
                "operationId": "updateDiscoverTalent",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "id",
                                    "title",
                                    "description",
                                    "button_text"
                                ],
                                "properties": {
                                    "id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "title": {
                                        "type": "string",
                                        "example": "Updated Title"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Updated description"
                                    },
                                    "button_text": {
                                        "type": "string",
                                        "example": "Updated Button Text"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Discover Talent updated successfully"
                    },
                    "404": {
                        "description": "Discover Talent not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/discoverTalent/discover-talent/delete/{id}": {
            "delete": {
                "tags": [
                    "DiscoverTalent"
                ],
                "summary": "Delete Discover Talent",
                "description": "Delete a Discover Talent by its ID",
                "operationId": "deleteDiscoverTalent",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Discover Talent deleted successfully"
                    },
                    "404": {
                        "description": "Discover Talent not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/discoverTalent/background/create-background": {
            "post": {
                "tags": [
                    "DiscoverTalent"
                ],
                "summary": "Create Discover Talent Background",
                "description": "Create a new Discover Talent Background",
                "operationId": "createDiscoverTalentBackground",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "discover_id",
                                    "image_url"
                                ],
                                "properties": {
                                    "discover_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "image_url": {
                                        "type": "string",
                                        "example": "000/image.jpg"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Discover Talent Background created successfully"
                    },
                    "400": {
                        "description": "Error creating Discover Talent Background"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/discoverTalent/backgrounds": {
            "get": {
                "tags": [
                    "DiscoverTalent"
                ],
                "summary": "Get All Discover Talent Backgrounds",
                "description": "Get all Discover Talent Backgrounds",
                "operationId": "getAllDiscoverTalentBackground",
                "responses": {
                    "200": {
                        "description": "Successful"
                    },
                    "404": {
                        "description": "No Discover Talent Backgrounds found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/discoverTalent/background/{id}": {
            "get": {
                "tags": [
                    "DiscoverTalent"
                ],
                "summary": "Get Discover Talent Background by ID",
                "description": "Get a Discover Talent Background by its ID",
                "operationId": "getDiscoverTalentBackgroundById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful"
                    },
                    "404": {
                        "description": "Discover Talent Background not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/discoverTalent/background/update": {
            "put": {
                "tags": [
                    "DiscoverTalent"
                ],
                "summary": "Update Discover Talent Background",
                "description": "Update an existing Discover Talent Background",
                "operationId": "updateDiscoverTalentBackground",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "id",
                                    "discover_id",
                                    "image_url"
                                ],
                                "properties": {
                                    "id": {
                                        "type": "integer",
                                        "example": 0
                                    },
                                    "discover_id": {
                                        "type": "integer",
                                        "example": 0
                                    },
                                    "image_url": {
                                        "type": "string",
                                        "example": "0000/new_image.jpg"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Discover Talent Background updated successfully"
                    },
                    "404": {
                        "description": "Discover Talent Background not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/discoverTalent/background/delete/{id}": {
            "delete": {
                "tags": [
                    "DiscoverTalent"
                ],
                "summary": "Delete Discover Talent Background",
                "description": "Delete a Discover Talent Background by its ID",
                "operationId": "deleteDiscoverTalentBackground",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Discover Talent Background deleted successfully"
                    },
                    "404": {
                        "description": "Discover Talent Background not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/file/upload": {
            "post": {
                "tags": [
                    "File"
                ],
                "summary": "Upload new file",
                "description": "Uploads new file to directory and return path for DB",
                "operationId": "uploadFile",
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "file"
                                ],
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "format": "binary"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request"
                    }
                }
            }
        },
        "/api/file/download-file": {
            "post": {
                "tags": [
                    "File"
                ],
                "summary": "download new file",
                "description": "downloads new file",
                "operationId": "downloadFile",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "filePath"
                                ],
                                "properties": {
                                    "filePath": {
                                        "type": "string",
                                        "example": "/path/to/your/file.jpg"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request"
                    }
                }
            }
        },
        "/api/file/delete": {
            "delete": {
                "tags": [
                    "File"
                ],
                "summary": "Delete",
                "description": "delete file from directory and database",
                "operationId": "deleteFile",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "path"
                                ],
                                "properties": {
                                    "path": {
                                        "type": "string",
                                        "format": "string",
                                        "example": "0000/file.png"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/api/gigs/create-gigs": {
            "post": {
                "tags": [
                    "Gigs"
                ],
                "summary": "Create new Gigs",
                "description": "Create a new Gigs",
                "operationId": "createGigs",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "description"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Abraham"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Gigs Experience"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Validation error"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/gigs/getGigsList": {
            "get": {
                "tags": [
                    "Gigs"
                ],
                "summary": "Get list of Gigs",
                "description": "Returns list of Gigs",
                "operationId": "getGigsList",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "404": {
                        "description": "No Gigs found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/gigs/getGig/{id}": {
            "get": {
                "tags": [
                    "Gigs"
                ],
                "summary": "Get Gig information",
                "description": "Returns Gig data",
                "operationId": "getGigById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Gig not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/gigs/giglist/update": {
            "put": {
                "tags": [
                    "Gigs"
                ],
                "summary": "Update Gig List",
                "description": "Update Gig List",
                "operationId": "updateGigList",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "id",
                                    "name",
                                    "description"
                                ],
                                "properties": {
                                    "id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "name": {
                                        "type": "string",
                                        "example": "Abraham"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Description"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Validation error"
                    },
                    "404": {
                        "description": "GigList not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/gigs/giglist/delete/{id}": {
            "delete": {
                "tags": [
                    "Gigs"
                ],
                "summary": "Delete GigList",
                "description": "Delete Giglist",
                "operationId": "deleteGigList",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "404": {
                        "description": "GigList not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/jobtype/create": {
            "post": {
                "tags": [
                    "Job Type"
                ],
                "summary": "Create new JobType",
                "description": "Create a new JobType",
                "operationId": "createJobType",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "type",
                                    "description"
                                ],
                                "properties": {
                                    "type": {
                                        "type": "string",
                                        "example": "Computer Repair"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "JobType Experience"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Validation error"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/jobtype/getAll": {
            "get": {
                "tags": [
                    "Job Type"
                ],
                "summary": "Get list of all Job Type",
                "description": "Returns list of All Job Type",
                "operationId": "getAllJobType",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "404": {
                        "description": "No JobType found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/jobtype/getById/{id}": {
            "get": {
                "tags": [
                    "Job Type"
                ],
                "summary": "Get Job Type information",
                "description": "Returns Job Type data",
                "operationId": "getJobTypeById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Job Type not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/jobtype/update": {
            "put": {
                "tags": [
                    "Job Type"
                ],
                "summary": "Update Job Type",
                "description": "Update Job Type",
                "operationId": "updateJobType",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "id",
                                    "type",
                                    "description"
                                ],
                                "properties": {
                                    "id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "type": {
                                        "type": "string",
                                        "example": "Abraham"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Description"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Validation error"
                    },
                    "404": {
                        "description": "JobType not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/jobtype/delete/{id}": {
            "delete": {
                "tags": [
                    "Job Type"
                ],
                "summary": "Delete JobType",
                "description": "Delete Giglist",
                "operationId": "deleteJobType",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "404": {
                        "description": "JobType not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/job/upsert-job": {
            "post": {
                "tags": [
                    "Job"
                ],
                "summary": "Create or Update Job",
                "description": "Create a new job or update an existing job, job_id is set to 0 for creating new job",
                "operationId": "upsertJob",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "job_id",
                                    "client_id",
                                    "title",
                                    "description",
                                    "amount",
                                    "time",
                                    "project_type",
                                    "required_skills"
                                ],
                                "properties": {
                                    "job_id": {
                                        "description": "Job ID (use 0 for creating a new job)",
                                        "type": "integer",
                                        "example": 0
                                    },
                                    "client_id": {
                                        "description": "Client ID",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "title": {
                                        "description": "Title of the job",
                                        "type": "string",
                                        "maxLength": 255,
                                        "example": "Job Title"
                                    },
                                    "description": {
                                        "description": "Description of the job",
                                        "type": "string",
                                        "example": "Job description goes here"
                                    },
                                    "tags": {
                                        "description": "Tags related to the job",
                                        "type": "string",
                                        "example": "ux/ui,backend,frontend"
                                    },
                                    "amount": {
                                        "description": "Amount for the job",
                                        "type": "number",
                                        "format": "float",
                                        "minimum": 0,
                                        "example": 100
                                    },
                                    "time": {
                                        "description": "Time attached to the payment",
                                        "type": "string",
                                        "example": "per hour"
                                    },
                                    "project_type": {
                                        "description": "Project type: hourly or contract",
                                        "type": "string",
                                        "enum": [
                                            "hourly",
                                            "contract"
                                        ],
                                        "example": "hourly"
                                    },
                                    "required_skills": {
                                        "description": "Required Skills for the job",
                                        "type": "string",
                                        "example": "javascript,php,laravel"
                                    },
                                    "experience_level": {
                                        "description": "experience level eg 2 to 3 years",
                                        "type": "string",
                                        "example": "2_3 years"
                                    },
                                    "total_hour": {
                                        "description": "Set total hour the job should take",
                                        "type": "integer",
                                        "example": "0"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Job created successfully"
                    },
                    "200": {
                        "description": "Job updated successfully"
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "404": {
                        "description": "Job not found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/job/get_Job_by_slug/{slug}": {
            "get": {
                "tags": [
                    "Job"
                ],
                "summary": "Get job by slug",
                "description": "Returns job by slug",
                "operationId": "getJobBySlug",
                "parameters": [
                    {
                        "name": "slug",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Role not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/job/get_job_by_id/{job_id}": {
            "get": {
                "tags": [
                    "Job"
                ],
                "summary": "Get job by job_id",
                "description": "Returns job by job_id",
                "operationId": "getJobById",
                "parameters": [
                    {
                        "name": "job_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Role not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/job/all_jobs": {
            "get": {
                "tags": [
                    "Job"
                ],
                "summary": "Get list of all jobs",
                "description": "Returns list of all jobs",
                "operationId": "getAllJobs",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/job/available_jobs": {
            "get": {
                "tags": [
                    "Job"
                ],
                "summary": "Get list of all available jobs",
                "description": "Returns list of available jobs",
                "operationId": "getAllAvailableJobs",
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Search term to filter jobs by title or description",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "most_recent",
                        "in": "query",
                        "description": "Flag to sort jobs by most recent",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "most_relevant",
                        "in": "query",
                        "description": "Flag to sort jobs by most relevant",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "experience",
                        "in": "query",
                        "description": "Comma-separated list of experience levels",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "job_type",
                        "in": "query",
                        "description": "Comma-separated list of job types",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/job/my_jobs": {
            "get": {
                "tags": [
                    "Job"
                ],
                "summary": "Get client list of jobs",
                "description": "Returns list of client jobs",
                "operationId": "getMyJobs",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Role not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/job/recommended_jobs": {
            "get": {
                "tags": [
                    "Job"
                ],
                "summary": "Get recommended jobs for a logged in freelancer",
                "description": "Returns list of recommended jobs for a logged in freelancer",
                "operationId": "recommendedJobs",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "No Recommended Jobs found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/job/apply": {
            "post": {
                "tags": [
                    "Job"
                ],
                "summary": "Apply for a job",
                "operationId": "6f2bec2132ce022f47291dcf2b06c219",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "guppa_job_id",
                                    "user_id",
                                    "project_timeline",
                                    "cover_letter_file",
                                    "cover_letter",
                                    "payment_type",
                                    "service_charge",
                                    "total_payable"
                                ],
                                "properties": {
                                    "guppa_job_id": {
                                        "description": "ID of the job",
                                        "type": "integer",
                                        "example": 0
                                    },
                                    "user_id": {
                                        "description": "ID of the user",
                                        "type": "integer",
                                        "example": 0
                                    },
                                    "project_timeline": {
                                        "description": "Project timeline",
                                        "type": "string",
                                        "format": "date",
                                        "example": "2023-06-30"
                                    },
                                    "cover_letter_file": {
                                        "description": "Cover letter file",
                                        "type": "string",
                                        "format": "binary"
                                    },
                                    "cover_letter": {
                                        "description": "Cover letter text",
                                        "type": "string",
                                        "example": "I am interested in this job because..."
                                    },
                                    "payment_type": {
                                        "description": "Payment type (project or milestone)",
                                        "type": "string",
                                        "example": "project"
                                    },
                                    "project_price": {
                                        "description": "Project price, required if payment type is project",
                                        "type": "number",
                                        "example": 500
                                    },
                                    "service_charge": {
                                        "description": "Guppa Service Charge",
                                        "type": "number",
                                        "example": 50
                                    },
                                    "total_payable": {
                                        "description": "Total payable",
                                        "type": "number",
                                        "example": 450
                                    },
                                    "milestone_description": {
                                        "description": "Milestone descriptions, required if payment type is milestone",
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        },
                                        "example": [
                                            "Design phase",
                                            "Development phase"
                                        ]
                                    },
                                    "milestone_amount": {
                                        "description": "Milestone amounts, required if payment type is milestone",
                                        "type": "array",
                                        "items": {
                                            "type": "number",
                                            "format": "float"
                                        },
                                        "example": [
                                            100,
                                            400
                                        ]
                                    },
                                    "total_milestone_price": {
                                        "description": "Total milestone price, required if payment type is milestone",
                                        "type": "number",
                                        "example": 500
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Application submitted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean"
                                        },
                                        "message": {
                                            "type": "string"
                                        },
                                        "data": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/job/applied-jobs/{jobId}": {
            "get": {
                "tags": [
                    "Job"
                ],
                "summary": "Get applied jobs for a specific job",
                "operationId": "6e409204b36b08f5bcc03e91b99a8cba",
                "parameters": [
                    {
                        "name": "jobId",
                        "in": "path",
                        "description": "ID of the job",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/job/client-applied-jobs/{jobId}": {
            "get": {
                "tags": [
                    "Job"
                ],
                "summary": "Get client applied jobs for a specific job",
                "operationId": "38623face45d74f524753fc000b805d0",
                "parameters": [
                    {
                        "name": "jobId",
                        "in": "path",
                        "description": "ID of the job",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/job/freelancer-applied-jobs": {
            "get": {
                "tags": [
                    "Job"
                ],
                "summary": "Get freelancer applications for a specific job",
                "operationId": "6a952be8cf54190fa445967bf54eeddc",
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/job/applied-job/{applied_id}": {
            "get": {
                "tags": [
                    "Job"
                ],
                "summary": "Get a specific applied job",
                "operationId": "31dc59e57b8c10016ece0e67d2abdc97",
                "parameters": [
                    {
                        "name": "applied_id",
                        "in": "path",
                        "description": "ID of the applied job",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/job/freelancer-applied-job/{applied_id}": {
            "get": {
                "tags": [
                    "Job"
                ],
                "summary": "Get a specific applied job",
                "operationId": "4c5b2fadd629da5e43d3a95ff63942ec",
                "parameters": [
                    {
                        "name": "applied_id",
                        "in": "path",
                        "description": "ID of the applied job",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/job/approve-job/{applied_id}": {
            "post": {
                "tags": [
                    "Job"
                ],
                "summary": "Accept Freelance job proposal",
                "description": "Accept Freelancer Proposal",
                "operationId": "d336bc568b4e35296c4fae4a52947213",
                "parameters": [
                    {
                        "name": "applied_id",
                        "in": "path",
                        "description": "ID of the applied job",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Job Approved"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/job/reject-job/{applied_id}": {
            "post": {
                "tags": [
                    "Job"
                ],
                "summary": "Reject Job proposal",
                "description": "Reject Freelancer Proposal",
                "operationId": "ffbba299c9b72dc4e4578103454fa340",
                "parameters": [
                    {
                        "name": "applied_id",
                        "in": "path",
                        "description": "ID of the applied job",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Job Rejected"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/job/delete-job/{job_id}": {
            "delete": {
                "tags": [
                    "Job"
                ],
                "summary": "Delete  job",
                "operationId": "da0ca52b52aad1e4a79d566752e14a23",
                "parameters": [
                    {
                        "name": "job_id",
                        "in": "path",
                        "description": "ID of the job",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Job Deleted"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/job/delete-application/{applied_id}": {
            "delete": {
                "tags": [
                    "Job"
                ],
                "summary": "Delete job Application",
                "operationId": "3cc514c854390465350adb31bb48cc46",
                "parameters": [
                    {
                        "name": "applied_id",
                        "in": "path",
                        "description": "ID of the job application",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Job Application Deleted"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/job/contracts": {
            "get": {
                "tags": [
                    "Job"
                ],
                "summary": "Get list of  contracts",
                "operationId": "e216c1d7de00d53c46e70cb90cc9d69a",
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/job/contract/{contract_id}": {
            "get": {
                "tags": [
                    "Job"
                ],
                "summary": "Get contract detail",
                "operationId": "84c7a1d56114925dbb4ec89bea27582e",
                "parameters": [
                    {
                        "name": "contract_id",
                        "in": "path",
                        "description": "ID of the contract",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/job/contracts_for_client": {
            "get": {
                "tags": [
                    "Job"
                ],
                "summary": "Get list of  contracts for client",
                "operationId": "3575d1e98e5dcd9c4ba1eff3618863e8",
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/job/contract_for_client/{contract_id}": {
            "get": {
                "tags": [
                    "Job"
                ],
                "summary": "Get contract detail for client",
                "operationId": "57ae988f02122e82f80ba9d174117e28",
                "parameters": [
                    {
                        "name": "contract_id",
                        "in": "path",
                        "description": "ID of the contract",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/job/contract/update-freelancer/{contract_id}": {
            "put": {
                "tags": [
                    "Job"
                ],
                "summary": "Freelancer Update contract status",
                "description": "Update contract status",
                "operationId": "updateContractStatus",
                "parameters": [
                    {
                        "name": "contract_id",
                        "in": "path",
                        "description": "ID of the contract",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/job/contract/update-client/{contract_id}": {
            "put": {
                "tags": [
                    "Job"
                ],
                "summary": "Client Update contract status",
                "description": "Update contract status",
                "operationId": "updateClientContractStatus",
                "parameters": [
                    {
                        "name": "contract_id",
                        "in": "path",
                        "description": "ID of the contract",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/job/update-progress/{contract_id}/{progress}": {
            "put": {
                "tags": [
                    "Job"
                ],
                "summary": "Client Update contract progress",
                "description": "Update contract progress",
                "operationId": "updateContractProgress",
                "parameters": [
                    {
                        "name": "contract_id",
                        "in": "path",
                        "description": "ID of the contract",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "progress",
                        "in": "path",
                        "description": "Progress of the contract, eg 10 or 20 or 30 or 40 or 50 to 100",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/job/update-milestone-progress/{milestone_id}/{progress}": {
            "put": {
                "tags": [
                    "Job"
                ],
                "summary": "Update milestone progress",
                "description": "Update milestone progress",
                "operationId": "updateMilestoneProgress",
                "parameters": [
                    {
                        "name": "milestone_id",
                        "in": "path",
                        "description": "ID of the milestone",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "progress",
                        "in": "path",
                        "description": "Progress of the contract, eg completed or in progress",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/job/extract_cover_letter": {
            "get": {
                "tags": [
                    "Job"
                ],
                "summary": "Extract text from uploaded cover letter",
                "description": "text cover letter content",
                "operationId": "extractCoverLetter",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "file"
                                ],
                                "properties": {
                                    "file": {
                                        "description": "file path",
                                        "type": "string",
                                        "example": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Role not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/invites/search-freelancer": {
            "post": {
                "tags": [
                    "Invites"
                ],
                "summary": "Search for freelancers",
                "description": "Search for freelancers and then invite any for job bidding",
                "operationId": "searchForFreelancer",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "job_id",
                                    "skills",
                                    "ratings",
                                    "experience"
                                ],
                                "properties": {
                                    "job_id": {
                                        "description": "Job ID",
                                        "type": "integer",
                                        "example": 0
                                    },
                                    "skills": {
                                        "description": "skills, separated by comma",
                                        "type": "string",
                                        "example": "javascript,laravel or tailor,fashion designer"
                                    },
                                    "ratings": {
                                        "description": "ratings by numeric",
                                        "type": "integer",
                                        "maximum": 5,
                                        "example": 1
                                    },
                                    "experience": {
                                        "type": "string",
                                        "example": "2_3years,4_5years"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "freelancer found"
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "404": {
                        "description": "freelancer not found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/invites/only-invites-jobs": {
            "get": {
                "tags": [
                    "Invites"
                ],
                "summary": "Get Jobs that are only for invites",
                "description": "Return lists of client jobs that it's visibility is invites only",
                "operationId": "onlyInvitesJobs",
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/invites/invite-freelancer": {
            "post": {
                "tags": [
                    "Invites"
                ],
                "summary": "Invite freelancer to bid for job",
                "description": "Invite freelancer to bid for job",
                "operationId": "inviteForFreelancer",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "freelancer_id",
                                    "job_id",
                                    "description"
                                ],
                                "properties": {
                                    "freelancer_id": {
                                        "description": "Freelancer Id",
                                        "type": "integer",
                                        "example": 0
                                    },
                                    "job_id": {
                                        "description": "job id",
                                        "type": "integer",
                                        "example": 0
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "description"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "invite sent"
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/invites/search-history": {
            "get": {
                "tags": [
                    "Invites"
                ],
                "summary": "Get invites search history",
                "description": "Return all searches made why searching for freelancer",
                "operationId": "searchHistory",
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/invites/invites-sent": {
            "get": {
                "tags": [
                    "Invites"
                ],
                "summary": "Get all invites that was sent",
                "description": "Return all list of invites sent",
                "operationId": "invitesSent",
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/invites/my-invites": {
            "get": {
                "tags": [
                    "Invites"
                ],
                "summary": "Get all my invites",
                "description": "Return all list of invites sent to me",
                "operationId": "myInvites",
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/invites/accept_invite/{invite_id}": {
            "put": {
                "tags": [
                    "Invites"
                ],
                "summary": "Accept Invitation",
                "description": "Accept Invitation",
                "operationId": "acceptInvite",
                "parameters": [
                    {
                        "name": "invite_id",
                        "in": "path",
                        "description": "ID of the invitation",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/invites/decline_invite/{invite_id}": {
            "put": {
                "tags": [
                    "Invites"
                ],
                "summary": "Decline Invitation",
                "description": "Decline Invitation",
                "operationId": "declineInvite",
                "parameters": [
                    {
                        "name": "invite_id",
                        "in": "path",
                        "description": "ID of the invitation",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/monitor/all-api-usage": {
            "get": {
                "tags": [
                    "Monitor"
                ],
                "summary": "Get All API usage log",
                "operationId": "1035f648bb4caf0233c5335a47531b21",
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Api usage"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Not Found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Server error occurred."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/monitor/api-usage/{id}": {
            "get": {
                "tags": [
                    "Monitor"
                ],
                "summary": "Get API usage log by ID",
                "operationId": "0706f6402a1e7ea3a73f085fbf0ff144",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "API log ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Api usage"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Not Found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Server error occurred."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/monitor/audit-logs": {
            "get": {
                "tags": [
                    "Monitor"
                ],
                "summary": "Get All Audit logs",
                "operationId": "0847f15c1f8d1357523faafd0615b9ac",
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Api usage"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Not Found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Server error occurred."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/monitor/audit-log/{id}": {
            "get": {
                "tags": [
                    "Monitor"
                ],
                "summary": "Get Audit log by ID",
                "operationId": "649b362333cff1590ddf02e8ab49017b",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Audit log ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Audit log"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Not Found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Server error occurred."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/navbar/create-navbar-type": {
            "post": {
                "tags": [
                    "Navbar"
                ],
                "summary": "Create new navbar type",
                "description": "create a new navbar type",
                "operationId": "createNavbarType",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "type"
                                ],
                                "properties": {
                                    "type": {
                                        "type": "string",
                                        "example": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/navbar/navbar-types": {
            "get": {
                "tags": [
                    "Navbar"
                ],
                "summary": "Get list of navbar types",
                "description": "Returns list of navbar types",
                "operationId": "getNavbarTypeList",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/navbar/navbar": {
            "get": {
                "tags": [
                    "Navbar"
                ],
                "summary": "Get list of navbar",
                "description": "Returns list of navbar",
                "operationId": "getFullNavbarList",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/navbar/navbar_type/{id}": {
            "get": {
                "tags": [
                    "Navbar"
                ],
                "summary": "Get navbar type information",
                "description": "Returns navbar type data",
                "operationId": "getNavbarTypeById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Role not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/navbar/navbar_type/update": {
            "put": {
                "tags": [
                    "Navbar"
                ],
                "summary": "Update navbar type",
                "description": "update navbar type",
                "operationId": "updateNavbarType",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "id",
                                    "type"
                                ],
                                "properties": {
                                    "id": {
                                        "type": "integer",
                                        "example": "0"
                                    },
                                    "type": {
                                        "type": "string",
                                        "example": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/navbar/navbar_type/delete/{id}": {
            "delete": {
                "tags": [
                    "Navbar"
                ],
                "summary": "Delete navbar type",
                "description": "delete navbar type",
                "operationId": "deleteNavbarType",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/navbar/create-navmenu": {
            "post": {
                "tags": [
                    "Navbar"
                ],
                "summary": "Create new nav menu",
                "description": "Create a new nav menu",
                "operationId": "createNavMenu",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "navbar_id",
                                    "menu_text",
                                    "menu_link"
                                ],
                                "properties": {
                                    "navbar_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "menu_text": {
                                        "type": "string",
                                        "example": "Home"
                                    },
                                    "menu_link": {
                                        "type": "string",
                                        "format": "url",
                                        "example": "http://example.com/home"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Validation error"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/navbar/navmenus": {
            "get": {
                "tags": [
                    "Navbar"
                ],
                "summary": "Get list of nav menus",
                "description": "Returns list of nav menus",
                "operationId": "getNavMenuList",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "404": {
                        "description": "No nav menus found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/navbar/navmenu/{id}": {
            "get": {
                "tags": [
                    "Navbar"
                ],
                "summary": "Get nav menu information",
                "description": "Returns nav menu data",
                "operationId": "getNavMenuById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Nav menu not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/navbar/navmenu/update": {
            "put": {
                "tags": [
                    "Navbar"
                ],
                "summary": "Update nav menu",
                "description": "Update nav menu",
                "operationId": "updateNavMenu",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "id",
                                    "navbar_id",
                                    "menu_text",
                                    "menu_link"
                                ],
                                "properties": {
                                    "id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "navbar_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "menu_text": {
                                        "type": "string",
                                        "example": "Home"
                                    },
                                    "menu_link": {
                                        "type": "string",
                                        "format": "url",
                                        "example": "http://example.com/home"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Validation error"
                    },
                    "404": {
                        "description": "Nav menu not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/navbar/navmenu/delete/{id}": {
            "delete": {
                "tags": [
                    "Navbar"
                ],
                "summary": "Delete nav menu",
                "description": "Delete nav menu",
                "operationId": "deleteNavMenu",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "404": {
                        "description": "Nav menu not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/navbar/create-navtext": {
            "post": {
                "tags": [
                    "Navbar"
                ],
                "summary": "Create new nav text",
                "description": "Create a new nav text",
                "operationId": "createNavText",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "navbar_id",
                                    "text",
                                    "description"
                                ],
                                "properties": {
                                    "navbar_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "text": {
                                        "type": "string",
                                        "example": "Welcome to our website"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Welcome to our website"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Navbar Text created successfully"
                    },
                    "400": {
                        "description": "Validation error"
                    },
                    "404": {
                        "description": "Navbar not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/navbar/navtexts": {
            "get": {
                "tags": [
                    "Navbar"
                ],
                "summary": "Get list of nav texts",
                "description": "Returns list of nav texts",
                "operationId": "getAllNavText",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "404": {
                        "description": "No nav texts found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/navbar/navtext/{id}": {
            "get": {
                "tags": [
                    "Navbar"
                ],
                "summary": "Get nav text by ID",
                "description": "Returns nav text data",
                "operationId": "getNavTextById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Navbar text not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/navbar/banner_text": {
            "get": {
                "tags": [
                    "Navbar"
                ],
                "summary": "Get nav banner text",
                "description": "Returns banner text data",
                "operationId": "getBannerText",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Navbar text not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/navbar/navtext/update": {
            "put": {
                "tags": [
                    "Navbar"
                ],
                "summary": "Update nav text",
                "description": "Update nav text",
                "operationId": "updateNavText",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "navbar_id",
                                    "navbar_text_id",
                                    "text",
                                    "description"
                                ],
                                "properties": {
                                    "navbar_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "navbar_text_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "text": {
                                        "type": "string",
                                        "example": "Updated welcome message"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Updated welcome message"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Navbar Text updated successfully"
                    },
                    "400": {
                        "description": "Validation error"
                    },
                    "404": {
                        "description": "Navbar text not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/navbar/navtext/delete/{id}": {
            "delete": {
                "tags": [
                    "Navbar"
                ],
                "summary": "Delete nav text",
                "description": "Delete nav text",
                "operationId": "deleteNavText",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Navbar Text deleted successfully"
                    },
                    "404": {
                        "description": "Navbar text not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/navbar/navtext/activate/{id}": {
            "put": {
                "tags": [
                    "Navbar"
                ],
                "summary": "Activate nav text",
                "description": "activate nav text",
                "operationId": "activateNavText",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Navbar Text activated successfully"
                    },
                    "404": {
                        "description": "Navbar text not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/navbar/create-navbutton": {
            "post": {
                "tags": [
                    "Navbar"
                ],
                "summary": "Create new nav button",
                "description": "Create a new nav button",
                "operationId": "createNavButton",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "navbar_id",
                                    "button_text",
                                    "button_link"
                                ],
                                "properties": {
                                    "navbar_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "button_text": {
                                        "type": "string",
                                        "example": "Click Me"
                                    },
                                    "button_link": {
                                        "type": "string",
                                        "format": "url",
                                        "example": "https://example.com"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Navbar Buttons created successfully"
                    },
                    "400": {
                        "description": "Validation error"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/navbar/navbuttons": {
            "get": {
                "tags": [
                    "Navbar"
                ],
                "summary": "Get list of nav buttons",
                "description": "Returns list of nav buttons",
                "operationId": "getAllNavButton",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "404": {
                        "description": "Navbar Buttons not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/navbar/navbutton/{id}": {
            "get": {
                "tags": [
                    "Navbar"
                ],
                "summary": "Get nav button by ID",
                "description": "Returns nav button data",
                "operationId": "getNavButtonById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Navbar Button not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/navbar/navbutton/update": {
            "put": {
                "tags": [
                    "Navbar"
                ],
                "summary": "Update nav button",
                "description": "Update nav button",
                "operationId": "updateNavButton",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "id",
                                    "navbar_id",
                                    "button_text",
                                    "button_link"
                                ],
                                "properties": {
                                    "id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "navbar_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "button_text": {
                                        "type": "string",
                                        "example": "Click Me"
                                    },
                                    "button_link": {
                                        "type": "string",
                                        "format": "url",
                                        "example": "https://example.com"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Navbar Button updated successfully"
                    },
                    "400": {
                        "description": "Validation error"
                    },
                    "404": {
                        "description": "Navbar Button not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/navbar/navbutton/delete/{id}": {
            "delete": {
                "tags": [
                    "Navbar"
                ],
                "summary": "Delete nav button",
                "description": "Delete nav button",
                "operationId": "deleteNavButton",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Navbar Button deleted successfully"
                    },
                    "404": {
                        "description": "Navbar Button not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/navbar/upsert-logo": {
            "post": {
                "tags": [
                    "Navbar"
                ],
                "summary": "Create or update nav logo",
                "description": "Create or update a nav logo, for creating set id = 0",
                "operationId": "upsertLogo",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "navbar_id",
                                    "logo_url"
                                ],
                                "properties": {
                                    "navbar_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "logo_url": {
                                        "type": "string",
                                        "example": "https://example.com/logo.png"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Navbar logo created/updated successfully"
                    },
                    "400": {
                        "description": "Validation error"
                    },
                    "404": {
                        "description": "Navbar not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/navbar/get-logo": {
            "get": {
                "tags": [
                    "Navbar"
                ],
                "summary": "Get nav logo",
                "description": "Returns nav logo data",
                "operationId": "getNavLogo",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Navbar logo not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/navbar/logo/delete/{id}": {
            "delete": {
                "tags": [
                    "Navbar"
                ],
                "summary": "Delete nav logo",
                "description": "Delete nav logo",
                "operationId": "deleteNavLogo",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Navbar logo deleted successfully"
                    },
                    "404": {
                        "description": "Navbar logo not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/freelancer_onboarding/onboard": {
            "post": {
                "tags": [
                    "FreelancerOnboarding"
                ],
                "summary": "On board a freelancer",
                "description": "create a new route",
                "operationId": "onboardFreelancer",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "gigs",
                                    "years_of_experience",
                                    "looking_for",
                                    "skills",
                                    "portfolio",
                                    "language",
                                    "short_bio",
                                    "hourly_rate",
                                    "category"
                                ],
                                "properties": {
                                    "gigs": {
                                        "type": "string",
                                        "example": "string,string,string"
                                    },
                                    "years_of_experience": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "looking_for": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "skills": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "portfolio_link_website": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "language": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "short_bio": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "hourly_rate": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "category": {
                                        "type": "integer",
                                        "example": "0"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/api/report/users-report": {
            "post": {
                "tags": [
                    "Reports"
                ],
                "summary": "Get users report data with filters",
                "operationId": "872a1c1d08e527deff5cfd5653c36618",
                "parameters": [
                    {
                        "name": "start_date",
                        "in": "query",
                        "description": "Filter by start date (YYYY-MM-DD)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "name": "end_date",
                        "in": "query",
                        "description": "Filter by end date (YYYY-MM-DD)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter by status (either 'active' or 'inactive')",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "active",
                                "inactive"
                            ]
                        }
                    },
                    {
                        "name": "role",
                        "in": "query",
                        "description": "Filter by role (either 'freelancer' or 'client')",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "freelancer",
                                "client"
                            ]
                        }
                    },
                    {
                        "name": "country",
                        "in": "query",
                        "description": "Filter by country",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Server error occurred."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/report/jobs-report": {
            "post": {
                "tags": [
                    "Reports"
                ],
                "summary": "Get jobs report data with filters",
                "operationId": "6f9f5fe82dc3adb63355663b64844aab",
                "parameters": [
                    {
                        "name": "start_date",
                        "in": "query",
                        "description": "Filter by start date (YYYY-MM-DD)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "name": "end_date",
                        "in": "query",
                        "description": "Filter by end date (YYYY-MM-DD)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter by status (either 'active' or 'inactive')",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "active",
                                "inactive"
                            ]
                        }
                    },
                    {
                        "name": "job_status",
                        "in": "query",
                        "description": "Filter by job status (either 'available' or 'taken')",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "available",
                                "taken"
                            ]
                        }
                    },
                    {
                        "name": "job_visibility",
                        "in": "query",
                        "description": "Filter by job visibility (either 'public' or 'invite')",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "public",
                                "invite"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Server error occurred."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/report/applied-jobs-reports": {
            "post": {
                "tags": [
                    "Reports"
                ],
                "summary": "Get applied jobs report data with filters",
                "operationId": "fb58b7f0b3e380638af8e6cdc68a5477",
                "parameters": [
                    {
                        "name": "start_date",
                        "in": "query",
                        "description": "Filter by start date (YYYY-MM-DD)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "name": "end_date",
                        "in": "query",
                        "description": "Filter by end date (YYYY-MM-DD)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter by status (either 'awaiting', 'approved' or 'rejected')",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "awaiting",
                                "approved",
                                "rejected"
                            ]
                        }
                    },
                    {
                        "name": "payment_type",
                        "in": "query",
                        "description": "Filter by payment type (either 'project' or 'milestone')",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "project",
                                "milestone"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Server error occurred."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/report/contracts-reports": {
            "post": {
                "tags": [
                    "Reports"
                ],
                "summary": "Get contracts  report data with filters",
                "operationId": "5bc91d1cfe4e607907f54956db0c3b62",
                "parameters": [
                    {
                        "name": "start_date",
                        "in": "query",
                        "description": "Filter by start date (YYYY-MM-DD)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "name": "end_date",
                        "in": "query",
                        "description": "Filter by end date (YYYY-MM-DD)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter by status (either 'Awaiting Review', 'In Progress' or 'Done')",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "Awaiting Review",
                                "In Progress",
                                "Done"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Server error occurred."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/report/transaction-reports": {
            "post": {
                "tags": [
                    "Reports"
                ],
                "summary": "Get transactions report data with filters",
                "operationId": "1be88dbb5d4b96a1fb1da9cdbf61a654",
                "parameters": [
                    {
                        "name": "start_date",
                        "in": "query",
                        "description": "Filter by start date (YYYY-MM-DD)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "name": "end_date",
                        "in": "query",
                        "description": "Filter by end date (YYYY-MM-DD)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Server error occurred."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/reviews/freelancer-reviews/{freelancer_id}": {
            "get": {
                "tags": [
                    "Reviews"
                ],
                "summary": "Get all freelancer reviews",
                "description": "Return all freelancer reveiws",
                "operationId": "freelancerReviews",
                "parameters": [
                    {
                        "name": "freelancer_id",
                        "in": "path",
                        "description": "ID of the freelancer",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/reviews/rate-freelancer": {
            "post": {
                "tags": [
                    "Reviews"
                ],
                "summary": "rate freelancer performance",
                "description": "Leave a review for a freelancer, base on their performace",
                "operationId": "rateFreelancer",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "freelancer_id",
                                    "rated_by",
                                    "rating"
                                ],
                                "properties": {
                                    "freelancer_id": {
                                        "description": "Freelancer Id",
                                        "type": "integer",
                                        "example": 0
                                    },
                                    "rated_by": {
                                        "description": "rater id",
                                        "type": "integer",
                                        "example": 0
                                    },
                                    "rating": {
                                        "type": "integer",
                                        "example": 5
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "rate submitted"
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/setting/email-notifications": {
            "put": {
                "tags": [
                    "Setting"
                ],
                "summary": "update Email Notifications",
                "description": "update Email Notifications",
                "operationId": "updateEmailNotifications",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/setting/push-notifications": {
            "put": {
                "tags": [
                    "Setting"
                ],
                "summary": "update Push Notifications",
                "description": "update Push Notifications",
                "operationId": "updatePushNotifications",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/setting/sms-notifications": {
            "put": {
                "tags": [
                    "Setting"
                ],
                "summary": "update Sms Notifications",
                "description": "update Sms Notifications",
                "operationId": "updateSmsNotifications",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/setting/in-app-notifications": {
            "put": {
                "tags": [
                    "Setting"
                ],
                "summary": "update In App Notifications",
                "description": "update In App Notifications",
                "operationId": "updateInAppNotification",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/setting/profile-visibility": {
            "put": {
                "tags": [
                    "Setting"
                ],
                "summary": "update Profile Notifications",
                "description": "update Profile Notifications",
                "operationId": "updateProfileVisibility",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/setting/search-visibility": {
            "put": {
                "tags": [
                    "Setting"
                ],
                "summary": "update Search Visibility",
                "description": "update Search Visibility",
                "operationId": "updateSearchVisibility",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/setting/data-sharing": {
            "put": {
                "tags": [
                    "Setting"
                ],
                "summary": "update Data Sharing",
                "description": "update Data Sharing",
                "operationId": "updateDataSharing",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/setting/location-settings": {
            "put": {
                "tags": [
                    "Setting"
                ],
                "summary": "update Location Setting",
                "description": "update Location Setting",
                "operationId": "updateLocation",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/setting/ad-preferences": {
            "put": {
                "tags": [
                    "Setting"
                ],
                "summary": "update Ad Preference",
                "description": "update Ad Preference",
                "operationId": "updateAdPreferences",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/setting/activity-status": {
            "put": {
                "tags": [
                    "Setting"
                ],
                "summary": "update Activity Status",
                "description": "update Activity Status",
                "operationId": "updateActivityStatus",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/setting/settings": {
            "get": {
                "tags": [
                    "Setting"
                ],
                "summary": "get setting",
                "description": "get setting",
                "operationId": "getSettings",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/setting/request-data": {
            "get": {
                "tags": [
                    "Setting"
                ],
                "summary": "request account data",
                "description": "request account data",
                "operationId": "requestAccountData",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/setting/delete-account": {
            "delete": {
                "tags": [
                    "Setting"
                ],
                "summary": "delete my account permanently",
                "description": "delete my account permanently",
                "operationId": "deleteAccountPermanently",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/notification/notifications": {
            "get": {
                "tags": [
                    "Notifications"
                ],
                "summary": "Get all notifications for the current user",
                "operationId": "3a5c1c367375b53da4fa81f1bfc99933",
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Notifications"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "title": {
                                                        "type": "string",
                                                        "example": "Welcome"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "Welcome to our service!"
                                                    },
                                                    "isRead": {
                                                        "type": "string",
                                                        "example": "no"
                                                    },
                                                    "date": {
                                                        "type": "string",
                                                        "example": "2 hours ago"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Server error occurred."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/notification/notification/{id}": {
            "get": {
                "tags": [
                    "Notifications"
                ],
                "summary": "Get a specific notification by ID",
                "operationId": "4a5067fdd8e714197c544390025bdf96",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Notification ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Notification"
                                        },
                                        "data": {
                                            "properties": {
                                                "id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "title": {
                                                    "type": "string",
                                                    "example": "Welcome"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Welcome to our service!"
                                                },
                                                "isRead": {
                                                    "type": "string",
                                                    "example": "no"
                                                },
                                                "date": {
                                                    "type": "string",
                                                    "example": "2 hours ago"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Server error occurred."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/notification/read/{id}": {
            "put": {
                "tags": [
                    "Notifications"
                ],
                "summary": "Mark a notification as read",
                "operationId": "2d1eab7702342d534a0de3b486e3c697",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Notification ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Read"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Server error occurred."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/setting/is-2fa-verified": {
            "get": {
                "tags": [
                    "Notifications"
                ],
                "summary": "check if current user activated 2fa and is verified",
                "operationId": "b9858b0f3d8ac717233c428d0833dae3",
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Notifications"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "title": {
                                                        "type": "string",
                                                        "example": "Welcome"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "Welcome to our service!"
                                                    },
                                                    "isRead": {
                                                        "type": "string",
                                                        "example": "no"
                                                    },
                                                    "date": {
                                                        "type": "string",
                                                        "example": "2 hours ago"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Server error occurred."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/skill/upsert-skill": {
            "post": {
                "tags": [
                    "Skill"
                ],
                "summary": "Create or update a skill",
                "description": "Creates a new skill or updates an existing one based on the provided data.",
                "operationId": "upsertSkill",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "skill_id",
                                    "skill",
                                    "category_id"
                                ],
                                "properties": {
                                    "skill_id": {
                                        "type": "integer",
                                        "example": 0
                                    },
                                    "skill": {
                                        "description": "skills separeted by comma  ",
                                        "type": "string",
                                        "example": "Web developer, deskstop application"
                                    },
                                    "category_id": {
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/skill/delete/{id}": {
            "delete": {
                "tags": [
                    "Skill"
                ],
                "summary": "Delete a skill",
                "description": "Deletes a skill by ID.",
                "operationId": "deleteSkill",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the skill to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "skill deleted"
                    },
                    "404": {
                        "description": "skill not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/skill/activate/{id}": {
            "put": {
                "tags": [
                    "Skill"
                ],
                "summary": "Activate a skill",
                "description": "Activates a skill by ID.",
                "operationId": "activateSkill",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the skill to activate",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "skill activated"
                    },
                    "404": {
                        "description": "skill not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/skill/deactivate/{id}": {
            "put": {
                "tags": [
                    "Skill"
                ],
                "summary": "Deactivate a skill",
                "description": "Deactivates a skill by ID.",
                "operationId": "deactivateSkill",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the skill to deactivate",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "skill deactivated"
                    },
                    "404": {
                        "description": "skill not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/skill/get_skill/{id}": {
            "get": {
                "tags": [
                    "Skill"
                ],
                "summary": "Get a skill by ID",
                "description": "Fetches a skill by its ID.",
                "operationId": "getskillById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the skill to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "skill retrieved"
                    },
                    "404": {
                        "description": "skill not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/skill/skills/{category_id}": {
            "get": {
                "tags": [
                    "Skill"
                ],
                "summary": "Get all skills",
                "description": "Fetches all skills.",
                "operationId": "getAllSkills",
                "parameters": [
                    {
                        "name": "category_id",
                        "in": "path",
                        "description": "Category ID  to retrieve skills",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Skills retrieved"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/skill/get_skills_admin": {
            "get": {
                "tags": [
                    "Skill"
                ],
                "summary": "Get all skills for admin",
                "description": "Fetches all skills admin.",
                "operationId": "getAllSkillsForAdmin",
                "responses": {
                    "200": {
                        "description": "Skills retrieved"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/supportticket/create": {
            "post": {
                "tags": [
                    "SupportTicket"
                ],
                "summary": "Create new Support Ticket",
                "description": "Create a new SupportTicket",
                "operationId": "createSupportTicket",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "user_id",
                                    "type",
                                    "message",
                                    "status"
                                ],
                                "properties": {
                                    "user_id": {
                                        "type": "integer",
                                        "example": "2"
                                    },
                                    "type": {
                                        "type": "string",
                                        "example": "Jobs"
                                    },
                                    "message": {
                                        "type": "string",
                                        "example": "i am having problem"
                                    },
                                    "attachments": {
                                        "description": "attachments path separeted by comma",
                                        "type": "string",
                                        "example": "file1,file2,file3"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Validation error"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/supportticket/getAll": {
            "get": {
                "tags": [
                    "SupportTicket"
                ],
                "summary": "Get list of all Support Ticket",
                "description": "Returns list of All Support Ticket",
                "operationId": "getAllSupportTicket",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "404": {
                        "description": "No Support Ticket found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/supportticket/getById/{id}": {
            "get": {
                "tags": [
                    "SupportTicket"
                ],
                "summary": "Get Support Ticket information",
                "description": "Returns Support Ticket data",
                "operationId": "getSupportTicketById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Support Ticket not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/supportticket/get-my-tickets": {
            "get": {
                "tags": [
                    "SupportTicket"
                ],
                "summary": "Get list of all my Tickets",
                "description": "Returns list of All my Tickets",
                "operationId": "getAllMySupportTicket",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "404": {
                        "description": "No Support Ticket found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/supportticket/update": {
            "put": {
                "tags": [
                    "SupportTicket"
                ],
                "summary": "Update Support Ticket",
                "description": "Update Support Ticket",
                "operationId": "updateSupportTicket",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "id",
                                    "type",
                                    "message"
                                ],
                                "properties": {
                                    "id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "type": {
                                        "type": "string",
                                        "example": "Jobs"
                                    },
                                    "message": {
                                        "type": "string",
                                        "example": "i am having problem"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Validation error"
                    },
                    "404": {
                        "description": "Support Ticket not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/supportticket/delete/{id}": {
            "delete": {
                "tags": [
                    "SupportTicket"
                ],
                "summary": "Delete SupportTicket",
                "description": "Delete ticket",
                "operationId": "deleteSupportTicket",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "404": {
                        "description": "Support Ticket not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/supportticket/resolve/{id}": {
            "put": {
                "tags": [
                    "SupportTicket"
                ],
                "summary": "Resolve Ticket",
                "description": "Resolve ticket",
                "operationId": "resolveSupportTicket",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "404": {
                        "description": "Support Ticket not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/supportticket/close/{id}": {
            "put": {
                "tags": [
                    "SupportTicket"
                ],
                "summary": "Close Ticket",
                "description": "Close ticket",
                "operationId": "closeSupportTicket",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "404": {
                        "description": "Support Ticket not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/privacy/create": {
            "post": {
                "tags": [
                    "Privacy"
                ],
                "summary": "Create new privacy",
                "description": "Create a new privacy",
                "operationId": "createPrivacy",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "policy"
                                ],
                                "properties": {
                                    "policy": {
                                        "type": "string",
                                        "example": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Validation error"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/privacy/update": {
            "put": {
                "tags": [
                    "Privacy"
                ],
                "summary": "Create new privacy",
                "description": "Create a new privacy",
                "operationId": "updatePrivacy",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "policy_id",
                                    "policy"
                                ],
                                "properties": {
                                    "policy_id": {
                                        "type": "integer",
                                        "example": "0"
                                    },
                                    "policy": {
                                        "type": "string",
                                        "example": "Jobs"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Validation error"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/privacy/get": {
            "get": {
                "tags": [
                    "Privacy"
                ],
                "summary": "Get privacy",
                "description": "Returns privacy",
                "operationId": "getPrivacy",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "404": {
                        "description": "No contacts found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/contact/create": {
            "post": {
                "tags": [
                    "Contact"
                ],
                "summary": "Create new contact",
                "description": "Create a new contact",
                "operationId": "createContactUs",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "email",
                                    "subject",
                                    "message"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "john doe"
                                    },
                                    "email": {
                                        "type": "string",
                                        "example": "doe@gmail.com"
                                    },
                                    "subject": {
                                        "type": "string",
                                        "example": "complain"
                                    },
                                    "message": {
                                        "type": "string",
                                        "example": "description"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Validation error"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/contact/getAll": {
            "get": {
                "tags": [
                    "Contact"
                ],
                "summary": "Get list of all contacts",
                "description": "Returns list of All contacts",
                "operationId": "getAllContacts",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "404": {
                        "description": "No contacts found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/contact/delete/{id}": {
            "delete": {
                "tags": [
                    "Contact"
                ],
                "summary": "Delete contact",
                "description": "Delete contact",
                "operationId": "deleteContactUs",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "404": {
                        "description": "Support Ticket not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/banner/create": {
            "post": {
                "tags": [
                    "Banner"
                ],
                "summary": "Create new banner",
                "description": "Create a new banner",
                "operationId": "createBanner",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "image_url"
                                ],
                                "properties": {
                                    "image_url": {
                                        "type": "string",
                                        "example": "image.png"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Validation error"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/banner/getAll": {
            "get": {
                "tags": [
                    "Banner"
                ],
                "summary": "Get list of all banners",
                "description": "Returns list of All banners",
                "operationId": "getAllBanners",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "404": {
                        "description": "No banners found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/banner/delete/{id}": {
            "delete": {
                "tags": [
                    "Banner"
                ],
                "summary": "Delete banner",
                "description": "Delete banner",
                "operationId": "deleteBanner",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "404": {
                        "description": "Support Ticket not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/banner/activate/{id}": {
            "put": {
                "tags": [
                    "Banner"
                ],
                "summary": "activate banner",
                "description": "activate banner",
                "operationId": "activateBanner",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "404": {
                        "description": "banner not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/banner/deactivate/{id}": {
            "put": {
                "tags": [
                    "Banner"
                ],
                "summary": "deactivate banner",
                "description": "deactivate banner",
                "operationId": "deactivateBanner",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "404": {
                        "description": "banner not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/testimonial/getAllTestimonialCards": {
            "get": {
                "tags": [
                    "Testimonial"
                ],
                "summary": "Get all Testimonial cards",
                "operationId": "fcf8cfa6faa0ae46e5a247c0bad68d7a",
                "responses": {
                    "200": {
                        "description": "Successful"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/testimonial/getTestimonialCard/{id}": {
            "get": {
                "tags": [
                    "Testimonial"
                ],
                "summary": "Get testimonial by ID",
                "operationId": "5c881e93847f7e27275cd347db87ddec",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/testimonial/createTestimonialCard": {
            "post": {
                "tags": [
                    "Testimonial"
                ],
                "summary": "Create a new Testimonial Card",
                "operationId": "00903c991c7c288ecbb60e5fa40cb74b",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "testimonial",
                                    "testimonial_id"
                                ],
                                "properties": {
                                    "testimonial": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "testimonial_id": {
                                        "type": "integer",
                                        "example": 0
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Testimonial card added successfully"
                    },
                    "400": {
                        "description": "Error creating Testimonial card"
                    },
                    "422": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Server error"
                    }
                }
            }
        },
        "/api/testimonial/updateTestimonialCard/{id}": {
            "put": {
                "tags": [
                    "Testimonial"
                ],
                "summary": "Update a Testimonial card",
                "operationId": "8feff73a3e780317a3b06629a1559af0",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "testimonial",
                                    "testimonial_card_id",
                                    "testimonial_id"
                                ],
                                "properties": {
                                    "testimonial": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "testimonial_card_id": {
                                        "type": "integer",
                                        "example": 0
                                    },
                                    "testimonial_id": {
                                        "type": "integer",
                                        "example": 0
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Testimonial card updated successfully"
                    },
                    "404": {
                        "description": "Testimonial card does not exist"
                    },
                    "422": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Server error"
                    }
                }
            }
        },
        "/api/testimonial/deleteTestimonialCard/{id}": {
            "delete": {
                "tags": [
                    "Testimonial"
                ],
                "summary": "Delete a Testimonial card",
                "operationId": "77335f245c545e97110c077a8c859da2",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Testimonial card deleted successfully"
                    },
                    "404": {
                        "description": "Testimonial card not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                }
            }
        },
        "/api/testimonial/getAllTestimonials": {
            "get": {
                "tags": [
                    "Testimonial"
                ],
                "summary": "Get all Testimonials",
                "operationId": "92ead8955bdc390f51144d8addbf2325",
                "responses": {
                    "200": {
                        "description": "Successful"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/testimonial/getTestimonial/{id}": {
            "get": {
                "tags": [
                    "Testimonial"
                ],
                "summary": "Get testimonial by ID",
                "operationId": "310fcdb33330187b52dc4fb909e09d96",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/testimonial/createTestimonial": {
            "post": {
                "tags": [
                    "Testimonial"
                ],
                "summary": "Create a new Testimonial",
                "operationId": "d4416ac63d490f4c85286b1b69941437",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "title",
                                    "description"
                                ],
                                "properties": {
                                    "title": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Testimonial added successfully"
                    },
                    "400": {
                        "description": "Error creating Testimonial"
                    },
                    "422": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Server error"
                    }
                }
            }
        },
        "/api/testimonial/updateTestimonial/{id}": {
            "put": {
                "tags": [
                    "Testimonial"
                ],
                "summary": "Update a Testimonial",
                "operationId": "c6b32ba721af3195f885abc481387f9e",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "title",
                                    "description"
                                ],
                                "properties": {
                                    "title": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Testimonial updated successfully"
                    },
                    "404": {
                        "description": "Testimonial does not exist"
                    },
                    "422": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Server error"
                    }
                }
            }
        },
        "/api/testimonial/deleteTestimonial/{id}": {
            "delete": {
                "tags": [
                    "Testimonial"
                ],
                "summary": "Delete a Testimonial",
                "operationId": "b542355ad9767e70467cf5a1358ecfa9",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Testimonial deleted successfully"
                    },
                    "404": {
                        "description": "Testimonial not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                }
            }
        },
        "/api/transaction/get_all_transactions": {
            "get": {
                "tags": [
                    "Transaction"
                ],
                "summary": "Get list of all transactions",
                "description": "Returns list of all transactions",
                "operationId": "getAllTranctions",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/transaction/get_payment_by_id/{id}": {
            "get": {
                "tags": [
                    "Transaction"
                ],
                "summary": "Get payment by Id",
                "description": "Returns payment details",
                "operationId": "getPaymentById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Role not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/transaction/get_client_payments": {
            "get": {
                "tags": [
                    "Transaction"
                ],
                "summary": "Get  list of client payments",
                "description": "Returns list of client payments",
                "operationId": "getClientPayments",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Role not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/transaction/get_freelancer_payments": {
            "get": {
                "tags": [
                    "Transaction"
                ],
                "summary": "Get  list of freelancer payments",
                "description": "Returns list of freelancer payments",
                "operationId": "getFreelancerPayments",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Role not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/transaction/get_total_income_payouts/{user_id}": {
            "get": {
                "tags": [
                    "Transaction"
                ],
                "summary": "Get  list of freelancer total income and payouts",
                "description": "Returns list of freelancer total income and payouts",
                "operationId": "getFreelancerIncomePayouts",
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Role not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/transaction/pay": {
            "post": {
                "tags": [
                    "Transaction"
                ],
                "summary": "Buy bid",
                "operationId": "makePayment",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "bid"
                                ],
                                "properties": {
                                    "bid": {
                                        "type": "integer",
                                        "example": "10"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/transaction/payment/callback?trxref={ref1}&reference={ref2}": {
            "get": {
                "tags": [
                    "Transaction"
                ],
                "summary": "Payment callback",
                "description": "Returns payment callback",
                "operationId": "PaymentCallBack",
                "parameters": [
                    {
                        "name": "trxref",
                        "in": "path"
                    },
                    {
                        "name": "reference",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/transaction/payment/verify_payment/{reference}": {
            "post": {
                "tags": [
                    "Transaction"
                ],
                "summary": "verify payment",
                "operationId": "verifyPayment",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/transaction/pay-guppa": {
            "post": {
                "tags": [
                    "Transaction"
                ],
                "summary": "Make Payment for approved job",
                "operationId": "makePaymentToGuppa",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "payment_id"
                                ],
                                "properties": {
                                    "payment_id": {
                                        "type": "integer",
                                        "example": 10
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/transaction/payment/verify_guppa_payment/{reference}": {
            "post": {
                "tags": [
                    "Transaction"
                ],
                "summary": "verify guppa payment",
                "operationId": "verifyGuppaPayment",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/transaction/payment/pending-job-payments": {
            "get": {
                "tags": [
                    "Transaction"
                ],
                "summary": "get all client approved jobs that payment has not been made",
                "description": "Returns all client approved jobs that payment has not been made",
                "operationId": "PaymentJobPayments",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/verification/submit": {
            "post": {
                "tags": [
                    "Verification"
                ],
                "summary": "Submit a verification request",
                "description": "Submits a verification request and checks for existing records with similar data.",
                "operationId": "fe26249ada0dee454d1c5d4b743537c6",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "government_type",
                                    "government_id",
                                    "selfie_with_id",
                                    "full_name",
                                    "date_of_birth",
                                    "current_address",
                                    "phone_number",
                                    "email",
                                    "nationality",
                                    "id_document_number"
                                ],
                                "properties": {
                                    "document_type": {
                                        "type": "string",
                                        "example": "passport or Driver's license"
                                    },
                                    "government_id": {
                                        "type": "string",
                                        "example": "file path: 00000/doc.pdf"
                                    },
                                    "selfie_with_id": {
                                        "type": "string",
                                        "example": "file path: 0000/doc.pdf"
                                    },
                                    "full_name": {
                                        "type": "string",
                                        "example": "John Doe"
                                    },
                                    "date_of_birth": {
                                        "type": "string",
                                        "format": "date",
                                        "example": "1990-01-01"
                                    },
                                    "current_address": {
                                        "type": "string",
                                        "example": "123 Main St, Anytown, USA"
                                    },
                                    "phone_number": {
                                        "type": "string",
                                        "example": "+1234567890"
                                    },
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "john.doe@example.com"
                                    },
                                    "nationality": {
                                        "type": "string",
                                        "example": "USA"
                                    },
                                    "id_document_number": {
                                        "type": "string",
                                        "example": "78901234"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Your Verification Data have been submitted successfully and is undergoing review, always check for your email for response."
                                        },
                                        "status": {
                                            "type": "integer",
                                            "example": 200
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "A verification record with similar data already exists. Please use one account for your verification."
                                        },
                                        "status": {
                                            "type": "integer",
                                            "example": 409
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Server error"
                                        },
                                        "status": {
                                            "type": "integer",
                                            "example": 500
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/verification/getAll": {
            "get": {
                "tags": [
                    "Verification"
                ],
                "summary": "Get all submitted verifications",
                "description": "Retrieves all submitted verifications.",
                "operationId": "f5a25cc70ae042bc553b5d76c4f94b65",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Data fetched"
                                        },
                                        "status": {
                                            "type": "integer",
                                            "example": 200
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Not found"
                                        },
                                        "status": {
                                            "type": "integer",
                                            "example": 404
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Server error"
                                        },
                                        "status": {
                                            "type": "integer",
                                            "example": 500
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/verification/get-verification-id/{id}": {
            "get": {
                "tags": [
                    "Verification"
                ],
                "summary": "Get a submitted verification by ID",
                "description": "Retrieves a specific submitted verification by its ID.",
                "operationId": "75e9ced40f74d4bb1dcc0d42d01d657e",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the verification",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Data fetched"
                                        },
                                        "status": {
                                            "type": "integer",
                                            "example": 200
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Not Found"
                                        },
                                        "status": {
                                            "type": "integer",
                                            "example": 404
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Server error"
                                        },
                                        "status": {
                                            "type": "integer",
                                            "example": 500
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/verification/my-verification": {
            "get": {
                "tags": [
                    "Verification"
                ],
                "summary": "Get my  submitted verification",
                "description": "Retrieves my specific submitted verification.",
                "operationId": "61a00055bc572c17b0518d5b80af9246",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Data fetched"
                                        },
                                        "status": {
                                            "type": "integer",
                                            "example": 200
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Not Found"
                                        },
                                        "status": {
                                            "type": "integer",
                                            "example": 404
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Server error"
                                        },
                                        "status": {
                                            "type": "integer",
                                            "example": 500
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/verification/approve/{id}": {
            "put": {
                "tags": [
                    "Verification"
                ],
                "summary": "Approve a verification",
                "description": "Approves a specific verification by its ID.",
                "operationId": "11f1d402b18d2dc02ba6bd702999180c",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the verification",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Verification approved successfully"
                                        },
                                        "status": {
                                            "type": "integer",
                                            "example": 200
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Not Found"
                                        },
                                        "status": {
                                            "type": "integer",
                                            "example": 404
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Server error"
                                        },
                                        "status": {
                                            "type": "integer",
                                            "example": 500
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/verification/reject/{id}": {
            "put": {
                "tags": [
                    "Verification"
                ],
                "summary": "Reject a verification",
                "description": "Rejects a specific verification by its ID.",
                "operationId": "8846be79cf9df8fbc50a52c296ec9537",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the verification",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Verification rejected successfully"
                                        },
                                        "status": {
                                            "type": "integer",
                                            "example": 200
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Not Found"
                                        },
                                        "status": {
                                            "type": "integer",
                                            "example": 404
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Server error"
                                        },
                                        "status": {
                                            "type": "integer",
                                            "example": 500
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/verification/delete/{id}": {
            "delete": {
                "tags": [
                    "Verification"
                ],
                "summary": "Delete a verification",
                "description": "Deletes a specific verification by its ID.",
                "operationId": "6614b9a00ce1b95b68ca71a90be37a64",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the verification",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Verification deleted successfully"
                                        },
                                        "status": {
                                            "type": "integer",
                                            "example": 200
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Not Found"
                                        },
                                        "status": {
                                            "type": "integer",
                                            "example": 404
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Server error"
                                        },
                                        "status": {
                                            "type": "integer",
                                            "example": 500
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/whychooseus/create": {
            "post": {
                "tags": [
                    "WhyChooseUs"
                ],
                "summary": "Create a new Why Choose Us item",
                "description": "Creates a new Why Choose Us item",
                "operationId": "createWhyChooseUs",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "heading",
                                    "description"
                                ],
                                "properties": {
                                    "heading": {
                                        "type": "string",
                                        "example": "Why Choose Us Heading"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Why Choose Us Description"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Why Choose Us created successfully"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/whychooseus/whychooseus": {
            "get": {
                "tags": [
                    "WhyChooseUs"
                ],
                "summary": "Get all Why Choose Us items",
                "description": "Returns all Why Choose Us items",
                "operationId": "getAllWhyChooseUs",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/whychooseus/why-choose-us": {
            "get": {
                "tags": [
                    "WhyChooseUs"
                ],
                "summary": "Get all Why Choose Us items for landing page",
                "description": "Returns all Why Choose Us items",
                "operationId": "getAllWhyChooseUsFE",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    }
                }
            }
        },
        "/api/whychooseus/whychooseus/{id}": {
            "get": {
                "tags": [
                    "WhyChooseUs"
                ],
                "summary": "Get Why Choose Us by ID",
                "description": "Returns Why Choose Us data by ID",
                "operationId": "getWhyChooseUsById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Why Choose Us not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/whychooseus/update": {
            "put": {
                "tags": [
                    "WhyChooseUs"
                ],
                "summary": "Update Why Choose Us",
                "description": "Update Why Choose Us item",
                "operationId": "updateWhyChooseUs",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "id",
                                    "heading",
                                    "description"
                                ],
                                "properties": {
                                    "id": {
                                        "type": "integer",
                                        "example": "0"
                                    },
                                    "heading": {
                                        "type": "string",
                                        "example": "Updated Why Choose Us Heading"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Updated Why Choose Us Description"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Why Choose Us updated successfully"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/whychooseus/delete/{id}": {
            "delete": {
                "tags": [
                    "WhyChooseUs"
                ],
                "summary": "Delete Why Choose Us",
                "description": "Delete Why Choose Us item",
                "operationId": "deleteWhyChooseUs",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Why Choose Us deleted successfully"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/whychooseus/card/create": {
            "post": {
                "tags": [
                    "WhyChooseUs"
                ],
                "summary": "Create a new Why Choose Us Card",
                "description": "Creates a new Why Choose Us Card",
                "operationId": "createWhyChooseUsCard",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "guppa_id",
                                    "picture",
                                    "title",
                                    "description"
                                ],
                                "properties": {
                                    "guppa_id": {
                                        "type": "integer",
                                        "example": "0"
                                    },
                                    "picture": {
                                        "type": "string",
                                        "example": "0000/picture.jpg"
                                    },
                                    "title": {
                                        "type": "string",
                                        "example": "Card Title"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Card Description"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Why Choose Us Card created successfully"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/whychooseus/cards": {
            "get": {
                "tags": [
                    "WhyChooseUs"
                ],
                "summary": "Get all Why Choose Us card items",
                "description": "Returns all Why Choose Us card items",
                "operationId": "getAllWhyChooseUsCard",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/whychooseus/card/{id}": {
            "get": {
                "tags": [
                    "WhyChooseUs"
                ],
                "summary": "Get Why Choose Us card by ID",
                "description": "Returns Why Choose Us card data by ID",
                "operationId": "getWhyChooseUsCardById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Why Choose Us card not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/whychooseus/card/update": {
            "put": {
                "tags": [
                    "WhyChooseUs"
                ],
                "summary": "Update Why Choose Us Card",
                "description": "Update Why Choose Us Card",
                "operationId": "updateWhyChooseUsCard",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "id",
                                    "guppa_id",
                                    "picture",
                                    "title",
                                    "description"
                                ],
                                "properties": {
                                    "id": {
                                        "type": "integer",
                                        "example": "1"
                                    },
                                    "guppa_id": {
                                        "type": "integer",
                                        "example": "1"
                                    },
                                    "picture": {
                                        "type": "string",
                                        "example": "path/to/updated_picture.jpg"
                                    },
                                    "title": {
                                        "type": "string",
                                        "example": "Updated Card Title"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Updated Card Description"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Why Choose Us Card updated successfully"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/whychooseus/card/delete/{id}": {
            "delete": {
                "tags": [
                    "WhyChooseUs"
                ],
                "summary": "Delete Why Choose Us",
                "description": "Delete Why Choose Us item",
                "operationId": "deleteWhyChooseUsCard",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Why Choose Us deleted successfully"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/yearsofexperience/create": {
            "post": {
                "tags": [
                    "Year Of Experience"
                ],
                "summary": "Create new Year of Experience",
                "description": "Create a new Year of Experience",
                "operationId": "createYearOfExperience",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "yearOfExperience"
                                ],
                                "properties": {
                                    "yearOfExperience": {
                                        "type": "string",
                                        "example": "5 Years"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Validation error"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/yearsofexperience/getAll": {
            "get": {
                "tags": [
                    "Year Of Experience"
                ],
                "summary": "Get All Year of Experience",
                "description": "Returns list of All Year of Experience",
                "operationId": "getAllYearofExperience",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "404": {
                        "description": "No Gigs founf"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/yearsofexperience/getById/{id}": {
            "get": {
                "tags": [
                    "Year Of Experience"
                ],
                "summary": "Get Year of Experience information by Id",
                "description": "Returns Year of Experience",
                "operationId": "getYearofExperienceById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Year of Experience not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/yearsofexperience/update": {
            "put": {
                "tags": [
                    "Year Of Experience"
                ],
                "summary": "Update Year of Experience",
                "description": "Update Year of Experience",
                "operationId": "UpdateYearofExperience",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "id",
                                    "yearOfExperience"
                                ],
                                "properties": {
                                    "id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "yearOfExperience": {
                                        "type": "string",
                                        "example": "5 Years"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Validation error"
                    },
                    "404": {
                        "description": "Year of Experience not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/yearsofexperience/delete/{id}": {
            "delete": {
                "tags": [
                    "Year Of Experience"
                ],
                "summary": "Delete Year of Experience",
                "description": "Delete Year of Experience",
                "operationId": "deleteYearsOfExperience",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "404": {
                        "description": "Year of Experience not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        }
    },
    "components": {
        "securitySchemes": {
            "sanctum": {
                "type": "apiKey",
                "description": "Enter token in format (Bearer <token>)",
                "name": "Authorization",
                "in": "header"
            }
        }
    },
    "security": [
        {
            "sanctum": []
        }
    ]
}